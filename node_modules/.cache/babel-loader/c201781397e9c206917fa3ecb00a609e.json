{"ast":null,"code":"import _classCallCheck from \"/Users/mac/Documents/WorkSpace/Pfizer/Capacitor/MyCapacitor/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/mac/Documents/WorkSpace/Pfizer/Capacitor/MyCapacitor/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/mac/Documents/WorkSpace/Pfizer/Capacitor/MyCapacitor/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/mac/Documents/WorkSpace/Pfizer/Capacitor/MyCapacitor/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/mac/Documents/WorkSpace/Pfizer/Capacitor/MyCapacitor/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _wrapNativeSuper from \"/Users/mac/Documents/WorkSpace/Pfizer/Capacitor/MyCapacitor/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/wrapNativeSuper\";\nimport _regeneratorRuntime from \"/Users/mac/Documents/WorkSpace/Pfizer/Capacitor/MyCapacitor/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/mac/Documents/WorkSpace/Pfizer/Capacitor/MyCapacitor/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _toConsumableArray from \"/Users/mac/Documents/WorkSpace/Pfizer/Capacitor/MyCapacitor/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"/Users/mac/Documents/WorkSpace/Pfizer/Capacitor/MyCapacitor/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar NAMESPACE = 'ionic';\nvar scopeId;\nvar contentRef;\nvar hostTagName;\nvar useNativeShadowDom = false;\nvar checkSlotFallbackVisibility = false;\nvar checkSlotRelocate = false;\nvar isSvgMode = false;\nvar queueCongestion = 0;\nvar queuePending = false;\nvar win = typeof window !== 'undefined' ? window : {};\nvar CSS = win.CSS;\nvar doc = win.document || {\n  head: {}\n};\nvar plt = {\n  $flags$: 0,\n  $resourcesUrl$: '',\n  jmp: function jmp(h) {\n    return h();\n  },\n  raf: function raf(h) {\n    return requestAnimationFrame(h);\n  },\n  ael: function ael(el, eventName, listener, opts) {\n    return el.addEventListener(eventName, listener, opts);\n  },\n  rel: function rel(el, eventName, listener, opts) {\n    return el.removeEventListener(eventName, listener, opts);\n  }\n};\n\nvar supportsShadow = /*@__PURE__*/function () {\n  return (doc.head.attachShadow + '').indexOf('[native') > -1;\n}();\n\nvar promiseResolve = function promiseResolve(v) {\n  return Promise.resolve(v);\n};\n\nvar supportsConstructibleStylesheets = /*@__PURE__*/function () {\n  try {\n    new CSSStyleSheet();\n    return true;\n  } catch (e) {}\n\n  return false;\n}();\n\nvar addHostEventListeners = function addHostEventListeners(elm, hostRef, listeners, attachParentListeners) {\n  if (listeners) {\n    // this is called immediately within the element's constructor\n    // initialize our event listeners on the host element\n    // we do this now so that we can listen to events that may\n    // have fired even before the instance is ready\n    {\n      // this component may have event listeners that should be attached to the parent\n      if (attachParentListeners) {\n        // this is being ran from within the connectedCallback\n        // which is important so that we know the host element actually has a parent element\n        // filter out the listeners to only have the ones that ARE being attached to the parent\n        listeners = listeners.filter(function (_ref) {\n          var _ref2 = _slicedToArray(_ref, 1),\n              flags = _ref2[0];\n\n          return flags & 16;\n        }\n        /* TargetParent */\n        );\n      } else {\n        // this is being ran from within the component constructor\n        // everything BUT the parent element listeners should be attached at this time\n        // filter out the listeners that are NOT being attached to the parent\n        listeners = listeners.filter(function (_ref3) {\n          var _ref4 = _slicedToArray(_ref3, 1),\n              flags = _ref4[0];\n\n          return !(flags & 16\n          /* TargetParent */\n          );\n        });\n      }\n    }\n    listeners.map(function (_ref5) {\n      var _ref6 = _slicedToArray(_ref5, 3),\n          flags = _ref6[0],\n          name = _ref6[1],\n          method = _ref6[2];\n\n      var target = getHostListenerTarget(elm, flags);\n      var handler = hostListenerProxy(hostRef, method);\n      var opts = hostListenerOpts(flags);\n      plt.ael(target, name, handler, opts);\n      (hostRef.$rmListeners$ = hostRef.$rmListeners$ || []).push(function () {\n        return plt.rel(target, name, handler, opts);\n      });\n    });\n  }\n};\n\nvar hostListenerProxy = function hostListenerProxy(hostRef, methodName) {\n  return function (ev) {\n    {\n      if (hostRef.$flags$ & 256\n      /* isListenReady */\n      ) {\n          // instance is ready, let's call it's member method for this event\n          hostRef.$lazyInstance$[methodName](ev);\n        } else {\n        (hostRef.$queuedListeners$ = hostRef.$queuedListeners$ || []).push([methodName, ev]);\n      }\n    }\n  };\n};\n\nvar getHostListenerTarget = function getHostListenerTarget(elm, flags) {\n  if (flags & 4\n  /* TargetDocument */\n  ) return doc;\n  if (flags & 8\n  /* TargetWindow */\n  ) return win;\n  if (flags & 32\n  /* TargetBody */\n  ) return doc.body;\n  if (flags & 16\n  /* TargetParent */\n  ) return elm.parentElement;\n  return elm;\n}; // prettier-ignore\n\n\nvar hostListenerOpts = function hostListenerOpts(flags) {\n  return (flags & 2\n  /* Capture */\n  ) !== 0;\n};\n\nvar CONTENT_REF_ID = 'r';\nvar ORG_LOCATION_ID = 'o';\nvar SLOT_NODE_ID = 's';\nvar TEXT_NODE_ID = 't';\nvar HYDRATE_ID = 's-id';\nvar HYDRATED_STYLE_ID = 'sty-id';\nvar HYDRATE_CHILD_ID = 'c-id';\nvar HYDRATED_CSS = '{visibility:hidden}.hydrated{visibility:inherit}';\nvar XLINK_NS = 'http://www.w3.org/1999/xlink';\n\nvar createTime = function createTime(fnName) {\n  var tagName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  {\n    return function () {\n      return;\n    };\n  }\n};\n\nvar uniqueTime = function uniqueTime(key, measureText) {\n  {\n    return function () {\n      return;\n    };\n  }\n};\n\nvar rootAppliedStyles = new WeakMap();\n\nvar registerStyle = function registerStyle(scopeId, cssText, allowCS) {\n  var style = styles.get(scopeId);\n\n  if (supportsConstructibleStylesheets && allowCS) {\n    style = style || new CSSStyleSheet();\n    style.replace(cssText);\n  } else {\n    style = cssText;\n  }\n\n  styles.set(scopeId, style);\n};\n\nvar addStyle = function addStyle(styleContainerNode, cmpMeta, mode, hostElm) {\n  var scopeId = getScopeId(cmpMeta.$tagName$, mode);\n  var style = styles.get(scopeId); // if an element is NOT connected then getRootNode() will return the wrong root node\n  // so the fallback is to always use the document for the root node in those cases\n\n  styleContainerNode = styleContainerNode.nodeType === 11\n  /* DocumentFragment */\n  ? styleContainerNode : doc;\n\n  if (!style) {\n    scopeId = getScopeId(cmpMeta.$tagName$);\n    style = styles.get(scopeId);\n  }\n\n  if (style) {\n    if (typeof style === 'string') {\n      styleContainerNode = styleContainerNode.head || styleContainerNode;\n      var appliedStyles = rootAppliedStyles.get(styleContainerNode);\n      var styleElm;\n\n      if (!appliedStyles) {\n        rootAppliedStyles.set(styleContainerNode, appliedStyles = new Set());\n      }\n\n      if (!appliedStyles.has(scopeId)) {\n        if (styleContainerNode.host && (styleElm = styleContainerNode.querySelector(\"[\".concat(HYDRATED_STYLE_ID, \"=\\\"\").concat(scopeId, \"\\\"]\")))) {\n          // This is only happening on native shadow-dom, do not needs CSS var shim\n          styleElm.innerHTML = style;\n        } else {\n          if (plt.$cssShim$) {\n            styleElm = plt.$cssShim$.createHostStyle(hostElm, scopeId, style, !!(cmpMeta.$flags$ & 10\n            /* needsScopedEncapsulation */\n            ));\n            var newScopeId = styleElm['s-sc'];\n\n            if (newScopeId) {\n              scopeId = newScopeId; // we don't want to add this styleID to the appliedStyles Set\n              // since the cssVarShim might need to apply several different\n              // stylesheets for the same component\n\n              appliedStyles = null;\n            }\n          } else {\n            styleElm = doc.createElement('style');\n            styleElm.innerHTML = style;\n          }\n\n          styleContainerNode.insertBefore(styleElm, styleContainerNode.querySelector('link'));\n        }\n\n        if (appliedStyles) {\n          appliedStyles.add(scopeId);\n        }\n      }\n    } else if (!styleContainerNode.adoptedStyleSheets.includes(style)) {\n      styleContainerNode.adoptedStyleSheets = [].concat(_toConsumableArray(styleContainerNode.adoptedStyleSheets), [style]);\n    }\n  }\n\n  return scopeId;\n};\n\nvar attachStyles = function attachStyles(hostRef) {\n  var cmpMeta = hostRef.$cmpMeta$;\n  var elm = hostRef.$hostElement$;\n  var flags = cmpMeta.$flags$;\n  var endAttachStyles = createTime('attachStyles', cmpMeta.$tagName$);\n  var scopeId = addStyle(supportsShadow && elm.shadowRoot ? elm.shadowRoot : elm.getRootNode(), cmpMeta, hostRef.$modeName$, elm);\n\n  if (flags & 10\n  /* needsScopedEncapsulation */\n  ) {\n      // only required when we're NOT using native shadow dom (slot)\n      // or this browser doesn't support native shadow dom\n      // and this host element was NOT created with SSR\n      // let's pick out the inner content for slot projection\n      // create a node to represent where the original\n      // content was first placed, which is useful later on\n      // DOM WRITE!!\n      elm['s-sc'] = scopeId;\n      elm.classList.add(scopeId + '-h');\n\n      if (flags & 2\n      /* scopedCssEncapsulation */\n      ) {\n          elm.classList.add(scopeId + '-s');\n        }\n    }\n\n  endAttachStyles();\n};\n\nvar getScopeId = function getScopeId(tagName, mode) {\n  return 'sc-' + (mode ? tagName + '-' + mode : tagName);\n};\n\nvar convertScopedToShadow = function convertScopedToShadow(css) {\n  return css.replace(/\\/\\*!@([^\\/]+)\\*\\/[^\\{]+\\{/g, '$1{');\n}; // Private\n\n\nvar computeMode = function computeMode(elm) {\n  return modeResolutionChain.map(function (h) {\n    return h(elm);\n  }).find(function (m) {\n    return !!m;\n  });\n}; // Public\n\n\nvar setMode = function setMode(handler) {\n  return modeResolutionChain.push(handler);\n};\n\nvar getMode = function getMode(ref) {\n  return getHostRef(ref).$modeName$;\n};\n/**\n * Default style mode id\n */\n\n/**\n * Reusable empty obj/array\n * Don't add values to these!!\n */\n\n\nvar EMPTY_OBJ = {};\n/**\n * Namespaces\n */\n\nvar SVG_NS = 'http://www.w3.org/2000/svg';\nvar HTML_NS = 'http://www.w3.org/1999/xhtml';\n\nvar isDef = function isDef(v) {\n  return v != null;\n};\n\nvar isComplexType = function isComplexType(o) {\n  // https://jsperf.com/typeof-fn-object/5\n  o = typeof o;\n  return o === 'object' || o === 'function';\n};\n\nvar getDynamicImportFunction = function getDynamicImportFunction(namespace) {\n  return \"__sc_import_\".concat(namespace.replace(/\\s|-/g, '_'));\n};\n/**\n * Production h() function based on Preact by\n * Jason Miller (@developit)\n * Licensed under the MIT License\n * https://github.com/developit/preact/blob/master/LICENSE\n *\n * Modified for Stencil's compiler and vdom\n */\n// const stack: any[] = [];\n// export function h(nodeName: string | d.FunctionalComponent, vnodeData: d.PropsType, child?: d.ChildType): d.VNode;\n// export function h(nodeName: string | d.FunctionalComponent, vnodeData: d.PropsType, ...children: d.ChildType[]): d.VNode;\n\n\nvar h = function h(nodeName, vnodeData) {\n  var child = null;\n  var key = null;\n  var slotName = null;\n  var simple = false;\n  var lastSimple = false;\n  var vNodeChildren = [];\n\n  var walk = function walk(c) {\n    for (var i = 0; i < c.length; i++) {\n      child = c[i];\n\n      if (Array.isArray(child)) {\n        walk(child);\n      } else if (child != null && typeof child !== 'boolean') {\n        if (simple = typeof nodeName !== 'function' && !isComplexType(child)) {\n          child = String(child);\n        }\n\n        if (simple && lastSimple) {\n          // If the previous child was simple (string), we merge both\n          vNodeChildren[vNodeChildren.length - 1].$text$ += child;\n        } else {\n          // Append a new vNode, if it's text, we create a text vNode\n          vNodeChildren.push(simple ? newVNode(null, child) : child);\n        }\n\n        lastSimple = simple;\n      }\n    }\n  };\n\n  for (var _len = arguments.length, children = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n    children[_key - 2] = arguments[_key];\n  }\n\n  walk(children);\n\n  if (vnodeData) {\n    // normalize class / classname attributes\n    if (vnodeData.key) {\n      key = vnodeData.key;\n    }\n\n    if (vnodeData.name) {\n      slotName = vnodeData.name;\n    }\n\n    {\n      var classData = vnodeData.className || vnodeData.class;\n\n      if (classData) {\n        vnodeData.class = typeof classData !== 'object' ? classData : Object.keys(classData).filter(function (k) {\n          return classData[k];\n        }).join(' ');\n      }\n    }\n  }\n\n  if (typeof nodeName === 'function') {\n    // nodeName is a functional component\n    return nodeName(vnodeData === null ? {} : vnodeData, vNodeChildren, vdomFnUtils);\n  }\n\n  var vnode = newVNode(nodeName, null);\n  vnode.$attrs$ = vnodeData;\n\n  if (vNodeChildren.length > 0) {\n    vnode.$children$ = vNodeChildren;\n  }\n\n  {\n    vnode.$key$ = key;\n  }\n  {\n    vnode.$name$ = slotName;\n  }\n  return vnode;\n};\n\nvar newVNode = function newVNode(tag, text) {\n  var vnode = {\n    $flags$: 0,\n    $tag$: tag,\n    $text$: text,\n    $elm$: null,\n    $children$: null\n  };\n  {\n    vnode.$attrs$ = null;\n  }\n  {\n    vnode.$key$ = null;\n  }\n  {\n    vnode.$name$ = null;\n  }\n  return vnode;\n};\n\nvar Host = {};\n\nvar isHost = function isHost(node) {\n  return node && node.$tag$ === Host;\n};\n\nvar vdomFnUtils = {\n  forEach: function forEach(children, cb) {\n    return children.map(convertToPublic).forEach(cb);\n  },\n  map: function map(children, cb) {\n    return children.map(convertToPublic).map(cb).map(convertToPrivate);\n  }\n};\n\nvar convertToPublic = function convertToPublic(node) {\n  return {\n    vattrs: node.$attrs$,\n    vchildren: node.$children$,\n    vkey: node.$key$,\n    vname: node.$name$,\n    vtag: node.$tag$,\n    vtext: node.$text$\n  };\n};\n\nvar convertToPrivate = function convertToPrivate(node) {\n  var vnode = newVNode(node.vtag, node.vtext);\n  vnode.$attrs$ = node.vattrs;\n  vnode.$children$ = node.vchildren;\n  vnode.$key$ = node.vkey;\n  vnode.$name$ = node.vname;\n  return vnode;\n};\n/**\n * Production setAccessor() function based on Preact by\n * Jason Miller (@developit)\n * Licensed under the MIT License\n * https://github.com/developit/preact/blob/master/LICENSE\n *\n * Modified for Stencil's compiler and vdom\n */\n\n\nvar setAccessor = function setAccessor(elm, memberName, oldValue, newValue, isSvg, flags) {\n  if (oldValue !== newValue) {\n    var isProp = isMemberInElement(elm, memberName);\n    var ln = memberName.toLowerCase();\n\n    if (memberName === 'class') {\n      var classList = elm.classList;\n      var oldClasses = parseClassList(oldValue);\n      var newClasses = parseClassList(newValue);\n      classList.remove.apply(classList, _toConsumableArray(oldClasses.filter(function (c) {\n        return c && !newClasses.includes(c);\n      })));\n      classList.add.apply(classList, _toConsumableArray(newClasses.filter(function (c) {\n        return c && !oldClasses.includes(c);\n      })));\n    } else if (memberName === 'style') {\n      // update style attribute, css properties and values\n      {\n        for (var prop in oldValue) {\n          if (!newValue || newValue[prop] == null) {\n            if (prop.includes('-')) {\n              elm.style.removeProperty(prop);\n            } else {\n              elm.style[prop] = '';\n            }\n          }\n        }\n      }\n\n      for (var _prop in newValue) {\n        if (!oldValue || newValue[_prop] !== oldValue[_prop]) {\n          if (_prop.includes('-')) {\n            elm.style.setProperty(_prop, newValue[_prop]);\n          } else {\n            elm.style[_prop] = newValue[_prop];\n          }\n        }\n      }\n    } else if (memberName === 'key') ;else if (memberName === 'ref') {\n      // minifier will clean this up\n      if (newValue) {\n        newValue(elm);\n      }\n    } else if (!isProp && memberName[0] === 'o' && memberName[1] === 'n') {\n      // Event Handlers\n      // so if the member name starts with \"on\" and the 3rd characters is\n      // a capital letter, and it's not already a member on the element,\n      // then we're assuming it's an event listener\n      if (memberName[2] === '-') {\n        // on- prefixed events\n        // allows to be explicit about the dom event to listen without any magic\n        // under the hood:\n        // <my-cmp on-click> // listens for \"click\"\n        // <my-cmp on-Click> // listens for \"Click\"\n        // <my-cmp on-ionChange> // listens for \"ionChange\"\n        // <my-cmp on-EVENTS> // listens for \"EVENTS\"\n        memberName = memberName.slice(3);\n      } else if (isMemberInElement(win, ln)) {\n        // standard event\n        // the JSX attribute could have been \"onMouseOver\" and the\n        // member name \"onmouseover\" is on the window's prototype\n        // so let's add the listener \"mouseover\", which is all lowercased\n        memberName = ln.slice(2);\n      } else {\n        // custom event\n        // the JSX attribute could have been \"onMyCustomEvent\"\n        // so let's trim off the \"on\" prefix and lowercase the first character\n        // and add the listener \"myCustomEvent\"\n        // except for the first character, we keep the event name case\n        memberName = ln[2] + memberName.slice(3);\n      }\n\n      if (oldValue) {\n        plt.rel(elm, memberName, oldValue, false);\n      }\n\n      if (newValue) {\n        plt.ael(elm, memberName, newValue, false);\n      }\n    } else {\n      // Set property if it exists and it's not a SVG\n      var isComplex = isComplexType(newValue);\n\n      if ((isProp || isComplex && newValue !== null) && !isSvg) {\n        try {\n          if (!elm.tagName.includes('-')) {\n            var n = newValue == null ? '' : newValue; // Workaround for Safari, moving the <input> caret when re-assigning the same valued\n\n            if (memberName === 'list') {\n              isProp = false; // tslint:disable-next-line: triple-equals\n            } else if (oldValue == null || elm[memberName] != n) {\n              elm[memberName] = n;\n            }\n          } else {\n            elm[memberName] = newValue;\n          }\n        } catch (e) {}\n      }\n      /**\n       * Need to manually update attribute if:\n       * - memberName is not an attribute\n       * - if we are rendering the host element in order to reflect attribute\n       * - if it's a SVG, since properties might not work in <svg>\n       * - if the newValue is null/undefined or 'false'.\n       */\n\n\n      var xlink = false;\n      {\n        if (ln !== (ln = ln.replace(/^xlink\\:?/, ''))) {\n          memberName = ln;\n          xlink = true;\n        }\n      }\n\n      if (newValue == null || newValue === false) {\n        if (xlink) {\n          elm.removeAttributeNS(XLINK_NS, memberName);\n        } else {\n          elm.removeAttribute(memberName);\n        }\n      } else if ((!isProp || flags & 4\n      /* isHost */\n      || isSvg) && !isComplex) {\n        newValue = newValue === true ? '' : newValue;\n\n        if (xlink) {\n          elm.setAttributeNS(XLINK_NS, memberName, newValue);\n        } else {\n          elm.setAttribute(memberName, newValue);\n        }\n      }\n    }\n  }\n};\n\nvar parseClassListRegex = /\\s/;\n\nvar parseClassList = function parseClassList(value) {\n  return !value ? [] : value.split(parseClassListRegex);\n};\n\nvar updateElement = function updateElement(oldVnode, newVnode, isSvgMode, memberName) {\n  // if the element passed in is a shadow root, which is a document fragment\n  // then we want to be adding attrs/props to the shadow root's \"host\" element\n  // if it's not a shadow root, then we add attrs/props to the same element\n  var elm = newVnode.$elm$.nodeType === 11\n  /* DocumentFragment */\n  && newVnode.$elm$.host ? newVnode.$elm$.host : newVnode.$elm$;\n  var oldVnodeAttrs = oldVnode && oldVnode.$attrs$ || EMPTY_OBJ;\n  var newVnodeAttrs = newVnode.$attrs$ || EMPTY_OBJ;\n  {\n    // remove attributes no longer present on the vnode by setting them to undefined\n    for (memberName in oldVnodeAttrs) {\n      if (!(memberName in newVnodeAttrs)) {\n        setAccessor(elm, memberName, oldVnodeAttrs[memberName], undefined, isSvgMode, newVnode.$flags$);\n      }\n    }\n  } // add new & update changed attributes\n\n  for (memberName in newVnodeAttrs) {\n    setAccessor(elm, memberName, oldVnodeAttrs[memberName], newVnodeAttrs[memberName], isSvgMode, newVnode.$flags$);\n  }\n};\n\nvar createElm = function createElm(oldParentVNode, newParentVNode, childIndex, parentElm) {\n  // tslint:disable-next-line: prefer-const\n  var newVNode = newParentVNode.$children$[childIndex];\n  var i = 0;\n  var elm;\n  var childNode;\n  var oldVNode;\n\n  if (!useNativeShadowDom) {\n    // remember for later we need to check to relocate nodes\n    checkSlotRelocate = true;\n\n    if (newVNode.$tag$ === 'slot') {\n      if (scopeId) {\n        // scoped css needs to add its scoped id to the parent element\n        parentElm.classList.add(scopeId + '-s');\n      }\n\n      newVNode.$flags$ |= newVNode.$children$ ? // slot element has fallback content\n      2\n      /* isSlotFallback */\n      : // slot element does not have fallback content\n      1\n      /* isSlotReference */\n      ;\n    }\n  }\n\n  if (newVNode.$text$ !== null) {\n    // create text node\n    elm = newVNode.$elm$ = doc.createTextNode(newVNode.$text$);\n  } else if (newVNode.$flags$ & 1\n  /* isSlotReference */\n  ) {\n      // create a slot reference node\n      elm = newVNode.$elm$ = doc.createTextNode('');\n    } else {\n    if (!isSvgMode) {\n      isSvgMode = newVNode.$tag$ === 'svg';\n    } // create element\n\n\n    elm = newVNode.$elm$ = doc.createElementNS(isSvgMode ? SVG_NS : HTML_NS, newVNode.$flags$ & 2\n    /* isSlotFallback */\n    ? 'slot-fb' : newVNode.$tag$);\n\n    if (isSvgMode && newVNode.$tag$ === 'foreignObject') {\n      isSvgMode = false;\n    } // add css classes, attrs, props, listeners, etc.\n\n\n    {\n      updateElement(null, newVNode, isSvgMode);\n    }\n\n    if (isDef(scopeId) && elm['s-si'] !== scopeId) {\n      // if there is a scopeId and this is the initial render\n      // then let's add the scopeId as a css class\n      elm.classList.add(elm['s-si'] = scopeId);\n    }\n\n    if (newVNode.$children$) {\n      for (i = 0; i < newVNode.$children$.length; ++i) {\n        // create the node\n        childNode = createElm(oldParentVNode, newVNode, i, elm); // return node could have been null\n\n        if (childNode) {\n          // append our new node\n          elm.appendChild(childNode);\n        }\n      }\n    }\n\n    {\n      if (newVNode.$tag$ === 'svg') {\n        // Only reset the SVG context when we're exiting <svg> element\n        isSvgMode = false;\n      } else if (elm.tagName === 'foreignObject') {\n        // Reenter SVG context when we're exiting <foreignObject> element\n        isSvgMode = true;\n      }\n    }\n  }\n\n  {\n    elm['s-hn'] = hostTagName;\n\n    if (newVNode.$flags$ & (2\n    /* isSlotFallback */\n    | 1\n    /* isSlotReference */\n    )) {\n      // remember the content reference comment\n      elm['s-sr'] = true; // remember the content reference comment\n\n      elm['s-cr'] = contentRef; // remember the slot name, or empty string for default slot\n\n      elm['s-sn'] = newVNode.$name$ || ''; // check if we've got an old vnode for this slot\n\n      oldVNode = oldParentVNode && oldParentVNode.$children$ && oldParentVNode.$children$[childIndex];\n\n      if (oldVNode && oldVNode.$tag$ === newVNode.$tag$ && oldParentVNode.$elm$) {\n        // we've got an old slot vnode and the wrapper is being replaced\n        // so let's move the old slot content back to it's original location\n        putBackInOriginalLocation(oldParentVNode.$elm$, false);\n      }\n    }\n  }\n  return elm;\n};\n\nvar putBackInOriginalLocation = function putBackInOriginalLocation(parentElm, recursive) {\n  plt.$flags$ |= 1\n  /* isTmpDisconnected */\n  ;\n  var oldSlotChildNodes = parentElm.childNodes;\n\n  for (var i = oldSlotChildNodes.length - 1; i >= 0; i--) {\n    var childNode = oldSlotChildNodes[i];\n\n    if (childNode['s-hn'] !== hostTagName && childNode['s-ol']) {\n      // // this child node in the old element is from another component\n      // // remove this node from the old slot's parent\n      // childNode.remove();\n      // and relocate it back to it's original location\n      parentReferenceNode(childNode).insertBefore(childNode, referenceNode(childNode)); // remove the old original location comment entirely\n      // later on the patch function will know what to do\n      // and move this to the correct spot in need be\n\n      childNode['s-ol'].remove();\n      childNode['s-ol'] = undefined;\n      checkSlotRelocate = true;\n    }\n\n    if (recursive) {\n      putBackInOriginalLocation(childNode, recursive);\n    }\n  }\n\n  plt.$flags$ &= ~1\n  /* isTmpDisconnected */\n  ;\n};\n\nvar addVnodes = function addVnodes(parentElm, before, parentVNode, vnodes, startIdx, endIdx) {\n  var containerElm = parentElm['s-cr'] && parentElm['s-cr'].parentNode || parentElm;\n  var childNode;\n\n  if (containerElm.shadowRoot && containerElm.tagName === hostTagName) {\n    containerElm = containerElm.shadowRoot;\n  }\n\n  for (; startIdx <= endIdx; ++startIdx) {\n    if (vnodes[startIdx]) {\n      childNode = createElm(null, parentVNode, startIdx, parentElm);\n\n      if (childNode) {\n        vnodes[startIdx].$elm$ = childNode;\n        containerElm.insertBefore(childNode, referenceNode(before));\n      }\n    }\n  }\n};\n\nvar removeVnodes = function removeVnodes(vnodes, startIdx, endIdx, vnode, elm) {\n  for (; startIdx <= endIdx; ++startIdx) {\n    if (vnode = vnodes[startIdx]) {\n      elm = vnode.$elm$;\n      callNodeRefs(vnode);\n      {\n        // we're removing this element\n        // so it's possible we need to show slot fallback content now\n        checkSlotFallbackVisibility = true;\n\n        if (elm['s-ol']) {\n          // remove the original location comment\n          elm['s-ol'].remove();\n        } else {\n          // it's possible that child nodes of the node\n          // that's being removed are slot nodes\n          putBackInOriginalLocation(elm, true);\n        }\n      } // remove the vnode's element from the dom\n\n      elm.remove();\n    }\n  }\n};\n\nvar updateChildren = function updateChildren(parentElm, oldCh, newVNode, newCh) {\n  var oldStartIdx = 0;\n  var newStartIdx = 0;\n  var idxInOld = 0;\n  var i = 0;\n  var oldEndIdx = oldCh.length - 1;\n  var oldStartVnode = oldCh[0];\n  var oldEndVnode = oldCh[oldEndIdx];\n  var newEndIdx = newCh.length - 1;\n  var newStartVnode = newCh[0];\n  var newEndVnode = newCh[newEndIdx];\n  var node;\n  var elmToMove;\n\n  while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n    if (oldStartVnode == null) {\n      // Vnode might have been moved left\n      oldStartVnode = oldCh[++oldStartIdx];\n    } else if (oldEndVnode == null) {\n      oldEndVnode = oldCh[--oldEndIdx];\n    } else if (newStartVnode == null) {\n      newStartVnode = newCh[++newStartIdx];\n    } else if (newEndVnode == null) {\n      newEndVnode = newCh[--newEndIdx];\n    } else if (isSameVnode(oldStartVnode, newStartVnode)) {\n      patch(oldStartVnode, newStartVnode);\n      oldStartVnode = oldCh[++oldStartIdx];\n      newStartVnode = newCh[++newStartIdx];\n    } else if (isSameVnode(oldEndVnode, newEndVnode)) {\n      patch(oldEndVnode, newEndVnode);\n      oldEndVnode = oldCh[--oldEndIdx];\n      newEndVnode = newCh[--newEndIdx];\n    } else if (isSameVnode(oldStartVnode, newEndVnode)) {\n      // Vnode moved right\n      if (oldStartVnode.$tag$ === 'slot' || newEndVnode.$tag$ === 'slot') {\n        putBackInOriginalLocation(oldStartVnode.$elm$.parentNode, false);\n      }\n\n      patch(oldStartVnode, newEndVnode);\n      parentElm.insertBefore(oldStartVnode.$elm$, oldEndVnode.$elm$.nextSibling);\n      oldStartVnode = oldCh[++oldStartIdx];\n      newEndVnode = newCh[--newEndIdx];\n    } else if (isSameVnode(oldEndVnode, newStartVnode)) {\n      // Vnode moved left\n      if (oldStartVnode.$tag$ === 'slot' || newEndVnode.$tag$ === 'slot') {\n        putBackInOriginalLocation(oldEndVnode.$elm$.parentNode, false);\n      }\n\n      patch(oldEndVnode, newStartVnode);\n      parentElm.insertBefore(oldEndVnode.$elm$, oldStartVnode.$elm$);\n      oldEndVnode = oldCh[--oldEndIdx];\n      newStartVnode = newCh[++newStartIdx];\n    } else {\n      // createKeyToOldIdx\n      idxInOld = -1;\n      {\n        for (i = oldStartIdx; i <= oldEndIdx; ++i) {\n          if (oldCh[i] && oldCh[i].$key$ !== null && oldCh[i].$key$ === newStartVnode.$key$) {\n            idxInOld = i;\n            break;\n          }\n        }\n      }\n\n      if (idxInOld >= 0) {\n        elmToMove = oldCh[idxInOld];\n\n        if (elmToMove.$tag$ !== newStartVnode.$tag$) {\n          node = createElm(oldCh && oldCh[newStartIdx], newVNode, idxInOld, parentElm);\n        } else {\n          patch(elmToMove, newStartVnode);\n          oldCh[idxInOld] = undefined;\n          node = elmToMove.$elm$;\n        }\n\n        newStartVnode = newCh[++newStartIdx];\n      } else {\n        // new element\n        node = createElm(oldCh && oldCh[newStartIdx], newVNode, newStartIdx, parentElm);\n        newStartVnode = newCh[++newStartIdx];\n      }\n\n      if (node) {\n        {\n          parentReferenceNode(oldStartVnode.$elm$).insertBefore(node, referenceNode(oldStartVnode.$elm$));\n        }\n      }\n    }\n  }\n\n  if (oldStartIdx > oldEndIdx) {\n    addVnodes(parentElm, newCh[newEndIdx + 1] == null ? null : newCh[newEndIdx + 1].$elm$, newVNode, newCh, newStartIdx, newEndIdx);\n  } else if (newStartIdx > newEndIdx) {\n    removeVnodes(oldCh, oldStartIdx, oldEndIdx);\n  }\n};\n\nvar isSameVnode = function isSameVnode(vnode1, vnode2) {\n  // compare if two vnode to see if they're \"technically\" the same\n  // need to have the same element tag, and same key to be the same\n  if (vnode1.$tag$ === vnode2.$tag$) {\n    if (vnode1.$tag$ === 'slot') {\n      return vnode1.$name$ === vnode2.$name$;\n    }\n\n    {\n      return vnode1.$key$ === vnode2.$key$;\n    }\n  }\n\n  return false;\n};\n\nvar referenceNode = function referenceNode(node) {\n  // this node was relocated to a new location in the dom\n  // because of some other component's slot\n  // but we still have an html comment in place of where\n  // it's original location was according to it's original vdom\n  return node && node['s-ol'] || node;\n};\n\nvar parentReferenceNode = function parentReferenceNode(node) {\n  return (node['s-ol'] ? node['s-ol'] : node).parentNode;\n};\n\nvar patch = function patch(oldVNode, newVNode) {\n  var elm = newVNode.$elm$ = oldVNode.$elm$;\n  var oldChildren = oldVNode.$children$;\n  var newChildren = newVNode.$children$;\n  var tag = newVNode.$tag$;\n  var text = newVNode.$text$;\n  var defaultHolder;\n\n  if (text === null) {\n    {\n      // test if we're rendering an svg element, or still rendering nodes inside of one\n      // only add this to the when the compiler sees we're using an svg somewhere\n      isSvgMode = tag === 'svg' ? true : tag === 'foreignObject' ? false : isSvgMode;\n    } // element node\n\n    {\n      if (tag === 'slot') ;else {\n        // either this is the first render of an element OR it's an update\n        // AND we already know it's possible it could have changed\n        // this updates the element's css classes, attrs, props, listeners, etc.\n        updateElement(oldVNode, newVNode, isSvgMode);\n      }\n    }\n\n    if (oldChildren !== null && newChildren !== null) {\n      // looks like there's child vnodes for both the old and new vnodes\n      updateChildren(elm, oldChildren, newVNode, newChildren);\n    } else if (newChildren !== null) {\n      // no old child vnodes, but there are new child vnodes to add\n      if (oldVNode.$text$ !== null) {\n        // the old vnode was text, so be sure to clear it out\n        elm.textContent = '';\n      } // add the new vnode children\n\n\n      addVnodes(elm, null, newVNode, newChildren, 0, newChildren.length - 1);\n    } else if (oldChildren !== null) {\n      // no new child vnodes, but there are old child vnodes to remove\n      removeVnodes(oldChildren, 0, oldChildren.length - 1);\n    }\n\n    if (isSvgMode && tag === 'svg') {\n      isSvgMode = false;\n    }\n  } else if (defaultHolder = elm['s-cr']) {\n    // this element has slotted content\n    defaultHolder.parentNode.textContent = text;\n  } else if (oldVNode.$text$ !== text) {\n    // update the text content for the text only vnode\n    // and also only if the text is different than before\n    elm.data = text;\n  }\n};\n\nvar updateFallbackSlotVisibility = function updateFallbackSlotVisibility(elm) {\n  // tslint:disable-next-line: prefer-const\n  var childNodes = elm.childNodes;\n  var childNode;\n  var i;\n  var ilen;\n  var j;\n  var slotNameAttr;\n  var nodeType;\n\n  for (i = 0, ilen = childNodes.length; i < ilen; i++) {\n    childNode = childNodes[i];\n\n    if (childNode.nodeType === 1\n    /* ElementNode */\n    ) {\n        if (childNode['s-sr']) {\n          // this is a slot fallback node\n          // get the slot name for this slot reference node\n          slotNameAttr = childNode['s-sn']; // by default always show a fallback slot node\n          // then hide it if there are other slots in the light dom\n\n          childNode.hidden = false;\n\n          for (j = 0; j < ilen; j++) {\n            if (childNodes[j]['s-hn'] !== childNode['s-hn']) {\n              // this sibling node is from a different component\n              nodeType = childNodes[j].nodeType;\n\n              if (slotNameAttr !== '') {\n                // this is a named fallback slot node\n                if (nodeType === 1\n                /* ElementNode */\n                && slotNameAttr === childNodes[j].getAttribute('slot')) {\n                  childNode.hidden = true;\n                  break;\n                }\n              } else {\n                // this is a default fallback slot node\n                // any element or text node (with content)\n                // should hide the default fallback slot node\n                if (nodeType === 1\n                /* ElementNode */\n                || nodeType === 3\n                /* TextNode */\n                && childNodes[j].textContent.trim() !== '') {\n                  childNode.hidden = true;\n                  break;\n                }\n              }\n            }\n          }\n        } // keep drilling down\n\n\n        updateFallbackSlotVisibility(childNode);\n      }\n  }\n};\n\nvar relocateNodes = [];\n\nvar relocateSlotContent = function relocateSlotContent(elm) {\n  // tslint:disable-next-line: prefer-const\n  var childNode;\n  var node;\n  var hostContentNodes;\n  var slotNameAttr;\n  var relocateNodeData;\n  var j;\n  var i = 0;\n  var childNodes = elm.childNodes;\n  var ilen = childNodes.length;\n\n  for (; i < ilen; i++) {\n    childNode = childNodes[i];\n\n    if (childNode['s-sr'] && (node = childNode['s-cr'])) {\n      // first got the content reference comment node\n      // then we got it's parent, which is where all the host content is in now\n      hostContentNodes = node.parentNode.childNodes;\n      slotNameAttr = childNode['s-sn'];\n\n      for (j = hostContentNodes.length - 1; j >= 0; j--) {\n        node = hostContentNodes[j];\n\n        if (!node['s-cn'] && !node['s-nr'] && node['s-hn'] !== childNode['s-hn']) {\n          // let's do some relocating to its new home\n          // but never relocate a content reference node\n          // that is suppose to always represent the original content location\n          if (isNodeLocatedInSlot(node, slotNameAttr)) {\n            // it's possible we've already decided to relocate this node\n            relocateNodeData = relocateNodes.find(function (r) {\n              return r.$nodeToRelocate$ === node;\n            }); // made some changes to slots\n            // let's make sure we also double check\n            // fallbacks are correctly hidden or shown\n\n            checkSlotFallbackVisibility = true;\n            node['s-sn'] = node['s-sn'] || slotNameAttr;\n\n            if (relocateNodeData) {\n              // previously we never found a slot home for this node\n              // but turns out we did, so let's remember it now\n              relocateNodeData.$slotRefNode$ = childNode;\n            } else {\n              // add to our list of nodes to relocate\n              relocateNodes.push({\n                $slotRefNode$: childNode,\n                $nodeToRelocate$: node\n              });\n            }\n\n            if (node['s-sr']) {\n              relocateNodes.map(function (relocateNode) {\n                if (isNodeLocatedInSlot(relocateNode.$nodeToRelocate$, node['s-sn'])) {\n                  relocateNodeData = relocateNodes.find(function (r) {\n                    return r.$nodeToRelocate$ === node;\n                  });\n\n                  if (relocateNodeData && !relocateNode.$slotRefNode$) {\n                    relocateNode.$slotRefNode$ = relocateNodeData.$slotRefNode$;\n                  }\n                }\n              });\n            }\n          } else if (!relocateNodes.some(function (r) {\n            return r.$nodeToRelocate$ === node;\n          })) {\n            // so far this element does not have a slot home, not setting slotRefNode on purpose\n            // if we never find a home for this element then we'll need to hide it\n            relocateNodes.push({\n              $nodeToRelocate$: node\n            });\n          }\n        }\n      }\n    }\n\n    if (childNode.nodeType === 1\n    /* ElementNode */\n    ) {\n        relocateSlotContent(childNode);\n      }\n  }\n};\n\nvar isNodeLocatedInSlot = function isNodeLocatedInSlot(nodeToRelocate, slotNameAttr) {\n  if (nodeToRelocate.nodeType === 1\n  /* ElementNode */\n  ) {\n      if (nodeToRelocate.getAttribute('slot') === null && slotNameAttr === '') {\n        return true;\n      }\n\n      if (nodeToRelocate.getAttribute('slot') === slotNameAttr) {\n        return true;\n      }\n\n      return false;\n    }\n\n  if (nodeToRelocate['s-sn'] === slotNameAttr) {\n    return true;\n  }\n\n  return slotNameAttr === '';\n};\n\nvar callNodeRefs = function callNodeRefs(vNode) {\n  {\n    vNode.$attrs$ && vNode.$attrs$.ref && vNode.$attrs$.ref(null);\n    vNode.$children$ && vNode.$children$.map(callNodeRefs);\n  }\n};\n\nvar renderVdom = function renderVdom(hostRef, renderFnResults) {\n  var hostElm = hostRef.$hostElement$;\n  var cmpMeta = hostRef.$cmpMeta$;\n  var oldVNode = hostRef.$vnode$ || newVNode(null, null);\n  var rootVnode = isHost(renderFnResults) ? renderFnResults : h(null, null, renderFnResults);\n  hostTagName = hostElm.tagName;\n\n  if (cmpMeta.$attrsToReflect$) {\n    rootVnode.$attrs$ = rootVnode.$attrs$ || {};\n    cmpMeta.$attrsToReflect$.map(function (_ref7) {\n      var _ref8 = _slicedToArray(_ref7, 2),\n          propName = _ref8[0],\n          attribute = _ref8[1];\n\n      return rootVnode.$attrs$[attribute] = hostElm[propName];\n    });\n  }\n\n  rootVnode.$tag$ = null;\n  rootVnode.$flags$ |= 4\n  /* isHost */\n  ;\n  hostRef.$vnode$ = rootVnode;\n  rootVnode.$elm$ = oldVNode.$elm$ = hostElm.shadowRoot || hostElm;\n  {\n    scopeId = hostElm['s-sc'];\n  }\n  {\n    contentRef = hostElm['s-cr'];\n    useNativeShadowDom = supportsShadow && (cmpMeta.$flags$ & 1\n    /* shadowDomEncapsulation */\n    ) !== 0; // always reset\n\n    checkSlotFallbackVisibility = false;\n  } // synchronous patch\n\n  patch(oldVNode, rootVnode);\n  {\n    if (checkSlotRelocate) {\n      // while we're moving nodes around existing nodes, temporarily disable\n      // the disconnectCallback from working\n      plt.$flags$ |= 1\n      /* isTmpDisconnected */\n      ;\n      relocateSlotContent(rootVnode.$elm$);\n      var relocateData;\n      var nodeToRelocate;\n      var orgLocationNode;\n      var parentNodeRef;\n      var insertBeforeNode;\n      var refNode;\n      var i = 0;\n\n      for (; i < relocateNodes.length; i++) {\n        relocateData = relocateNodes[i];\n        nodeToRelocate = relocateData.$nodeToRelocate$;\n\n        if (!nodeToRelocate['s-ol']) {\n          // add a reference node marking this node's original location\n          // keep a reference to this node for later lookups\n          orgLocationNode = doc.createTextNode('');\n          orgLocationNode['s-nr'] = nodeToRelocate;\n          nodeToRelocate.parentNode.insertBefore(nodeToRelocate['s-ol'] = orgLocationNode, nodeToRelocate);\n        }\n      }\n\n      for (i = 0; i < relocateNodes.length; i++) {\n        relocateData = relocateNodes[i];\n        nodeToRelocate = relocateData.$nodeToRelocate$;\n\n        if (relocateData.$slotRefNode$) {\n          // by default we're just going to insert it directly\n          // after the slot reference node\n          parentNodeRef = relocateData.$slotRefNode$.parentNode;\n          insertBeforeNode = relocateData.$slotRefNode$.nextSibling;\n          orgLocationNode = nodeToRelocate['s-ol'];\n\n          while (orgLocationNode = orgLocationNode.previousSibling) {\n            refNode = orgLocationNode['s-nr'];\n\n            if (refNode && refNode['s-sn'] === nodeToRelocate['s-sn'] && parentNodeRef === refNode.parentNode) {\n              refNode = refNode.nextSibling;\n\n              if (!refNode || !refNode['s-nr']) {\n                insertBeforeNode = refNode;\n                break;\n              }\n            }\n          }\n\n          if (!insertBeforeNode && parentNodeRef !== nodeToRelocate.parentNode || nodeToRelocate.nextSibling !== insertBeforeNode) {\n            // we've checked that it's worth while to relocate\n            // since that the node to relocate\n            // has a different next sibling or parent relocated\n            if (nodeToRelocate !== insertBeforeNode) {\n              if (!nodeToRelocate['s-hn'] && nodeToRelocate['s-ol']) {\n                // probably a component in the index.html that doesn't have it's hostname set\n                nodeToRelocate['s-hn'] = nodeToRelocate['s-ol'].parentNode.nodeName;\n              } // add it back to the dom but in its new home\n\n\n              parentNodeRef.insertBefore(nodeToRelocate, insertBeforeNode);\n            }\n          }\n        } else {\n          // this node doesn't have a slot home to go to, so let's hide it\n          if (nodeToRelocate.nodeType === 1\n          /* ElementNode */\n          ) {\n              nodeToRelocate.hidden = true;\n            }\n        }\n      } // done moving nodes around\n      // allow the disconnect callback to work again\n\n\n      plt.$flags$ &= ~1\n      /* isTmpDisconnected */\n      ;\n    }\n\n    if (checkSlotFallbackVisibility) {\n      updateFallbackSlotVisibility(rootVnode.$elm$);\n    } // always reset\n\n\n    relocateNodes.length = 0;\n  }\n};\n\nvar getElement = function getElement(ref) {\n  return getHostRef(ref).$hostElement$;\n};\n\nvar createEvent = function createEvent(ref, name, flags) {\n  var elm = getElement(ref);\n  return {\n    emit: function emit(detail) {\n      return emitEvent(elm, name, {\n        bubbles: !!(flags & 4\n        /* Bubbles */\n        ),\n        composed: !!(flags & 2\n        /* Composed */\n        ),\n        cancelable: !!(flags & 1\n        /* Cancellable */\n        ),\n        detail: detail\n      });\n    }\n  };\n};\n\nvar emitEvent = function emitEvent(elm, name, opts) {\n  var ev = new CustomEvent(name, opts);\n  elm.dispatchEvent(ev);\n  return ev;\n};\n\nvar attachToAncestor = function attachToAncestor(hostRef, ancestorComponent) {\n  if (ancestorComponent && !hostRef.$onRenderResolve$) {\n    ancestorComponent['s-p'].push(new Promise(function (r) {\n      return hostRef.$onRenderResolve$ = r;\n    }));\n  }\n};\n\nvar scheduleUpdate = function scheduleUpdate(hostRef, isInitialLoad) {\n  {\n    hostRef.$flags$ |= 16\n    /* isQueuedForUpdate */\n    ;\n  }\n\n  if (hostRef.$flags$ & 4\n  /* isWaitingForChildren */\n  ) {\n      hostRef.$flags$ |= 512\n      /* needsRerender */\n      ;\n      return;\n    }\n\n  var endSchedule = createTime('scheduleUpdate', hostRef.$cmpMeta$.$tagName$);\n  var ancestorComponent = hostRef.$ancestorComponent$;\n  var instance = hostRef.$lazyInstance$;\n\n  var update = function update() {\n    return updateComponent(hostRef, instance, isInitialLoad);\n  };\n\n  attachToAncestor(hostRef, ancestorComponent);\n  var promise;\n\n  if (isInitialLoad) {\n    {\n      hostRef.$flags$ |= 256\n      /* isListenReady */\n      ;\n\n      if (hostRef.$queuedListeners$) {\n        hostRef.$queuedListeners$.map(function (_ref9) {\n          var _ref10 = _slicedToArray(_ref9, 2),\n              methodName = _ref10[0],\n              event = _ref10[1];\n\n          return safeCall(instance, methodName, event);\n        });\n        hostRef.$queuedListeners$ = null;\n      }\n    }\n    {\n      promise = safeCall(instance, 'componentWillLoad');\n    }\n  }\n\n  {\n    promise = then(promise, function () {\n      return safeCall(instance, 'componentWillRender');\n    });\n  }\n  endSchedule(); // there is no ancestorc omponent or the ancestor component\n  // has already fired off its lifecycle update then\n  // fire off the initial update\n\n  return then(promise, function () {\n    return writeTask(update);\n  });\n};\n\nvar updateComponent = function updateComponent(hostRef, instance, isInitialLoad) {\n  // updateComponent\n  var elm = hostRef.$hostElement$;\n  var endUpdate = createTime('update', hostRef.$cmpMeta$.$tagName$);\n  var rc = elm['s-rc'];\n\n  if (isInitialLoad) {\n    // DOM WRITE!\n    attachStyles(hostRef);\n  }\n\n  var endRender = createTime('render', hostRef.$cmpMeta$.$tagName$);\n  {\n    {\n      // looks like we've got child nodes to render into this host element\n      // or we need to update the css class/attrs on the host element\n      // DOM WRITE!\n      renderVdom(hostRef, callRender(instance));\n    }\n  }\n\n  if (plt.$cssShim$) {\n    plt.$cssShim$.updateHost(elm);\n  }\n\n  {\n    hostRef.$flags$ &= ~16\n    /* isQueuedForUpdate */\n    ;\n  }\n  {\n    hostRef.$flags$ |= 2\n    /* hasRendered */\n    ;\n  }\n\n  if (rc) {\n    // ok, so turns out there are some child host elements\n    // waiting on this parent element to load\n    // let's fire off all update callbacks waiting\n    rc.map(function (cb) {\n      return cb();\n    });\n    elm['s-rc'] = undefined;\n  }\n\n  endRender();\n  endUpdate();\n  {\n    var childrenPromises = elm['s-p'];\n\n    var postUpdate = function postUpdate() {\n      return postUpdateComponent(hostRef);\n    };\n\n    if (childrenPromises.length === 0) {\n      postUpdate();\n    } else {\n      Promise.all(childrenPromises).then(postUpdate);\n      hostRef.$flags$ |= 4\n      /* isWaitingForChildren */\n      ;\n      childrenPromises.length = 0;\n    }\n  }\n};\n\nvar callRender = function callRender(instance) {\n  try {\n    instance = instance.render && instance.render();\n  } catch (e) {\n    consoleError(e);\n  }\n\n  return instance;\n};\n\nvar postUpdateComponent = function postUpdateComponent(hostRef) {\n  var tagName = hostRef.$cmpMeta$.$tagName$;\n  var elm = hostRef.$hostElement$;\n  var endPostUpdate = createTime('postUpdate', tagName);\n  var instance = hostRef.$lazyInstance$;\n  var ancestorComponent = hostRef.$ancestorComponent$;\n\n  if (!(hostRef.$flags$ & 64\n  /* hasLoadedComponent */\n  )) {\n    hostRef.$flags$ |= 64\n    /* hasLoadedComponent */\n    ;\n    {\n      // DOM WRITE!\n      addHydratedFlag(elm);\n    }\n    {\n      safeCall(instance, 'componentDidLoad');\n    }\n    endPostUpdate();\n    {\n      hostRef.$onReadyResolve$(elm);\n\n      if (!ancestorComponent) {\n        appDidLoad();\n      }\n    }\n  } else {\n    {\n      safeCall(instance, 'componentDidUpdate');\n    }\n    endPostUpdate();\n  }\n\n  {\n    hostRef.$onInstanceResolve$(elm);\n  } // load events fire from bottom to top\n  // the deepest elements load first then bubbles up\n\n  {\n    if (hostRef.$onRenderResolve$) {\n      hostRef.$onRenderResolve$();\n      hostRef.$onRenderResolve$ = undefined;\n    }\n\n    if (hostRef.$flags$ & 512\n    /* needsRerender */\n    ) {\n        nextTick(function () {\n          return scheduleUpdate(hostRef, false);\n        });\n      }\n\n    hostRef.$flags$ &= ~(4\n    /* isWaitingForChildren */\n    | 512\n    /* needsRerender */\n    );\n  } // ( •_•)\n  // ( •_•)>⌐■-■\n  // (⌐■_■)\n};\n\nvar _forceUpdate = function forceUpdate(ref) {\n  {\n    var hostRef = getHostRef(ref);\n    var isConnected = hostRef.$hostElement$.isConnected;\n\n    if (isConnected && (hostRef.$flags$ & (2\n    /* hasRendered */\n    | 16\n    /* isQueuedForUpdate */\n    )) === 2\n    /* hasRendered */\n    ) {\n        scheduleUpdate(hostRef, false);\n      } // Returns \"true\" when the forced update was successfully scheduled\n\n\n    return isConnected;\n  }\n};\n\nvar appDidLoad = function appDidLoad(who) {\n  // on appload\n  // we have finish the first big initial render\n  {\n    addHydratedFlag(doc.documentElement);\n  }\n  {\n    plt.$flags$ |= 2\n    /* appLoaded */\n    ;\n  }\n  nextTick(function () {\n    return emitEvent(win, 'appload', {\n      detail: {\n        namespace: NAMESPACE\n      }\n    });\n  });\n};\n\nvar safeCall = function safeCall(instance, method, arg) {\n  if (instance && instance[method]) {\n    try {\n      return instance[method](arg);\n    } catch (e) {\n      consoleError(e);\n    }\n  }\n\n  return undefined;\n};\n\nvar then = function then(promise, thenFn) {\n  return promise && promise.then ? promise.then(thenFn) : thenFn();\n};\n\nvar addHydratedFlag = function addHydratedFlag(elm) {\n  return elm.classList.add('hydrated');\n};\n\nvar initializeClientHydrate = function initializeClientHydrate(hostElm, tagName, hostId, hostRef) {\n  var endHydrate = createTime('hydrateClient', tagName);\n  var shadowRoot = hostElm.shadowRoot;\n  var childRenderNodes = [];\n  var slotNodes = [];\n  var shadowRootNodes = shadowRoot ? [] : null;\n  var vnode = hostRef.$vnode$ = newVNode(tagName, null);\n\n  if (!plt.$orgLocNodes$) {\n    initializeDocumentHydrate(doc.body, plt.$orgLocNodes$ = new Map());\n  }\n\n  hostElm[HYDRATE_ID] = hostId;\n  hostElm.removeAttribute(HYDRATE_ID);\n  clientHydrate(vnode, childRenderNodes, slotNodes, shadowRootNodes, hostElm, hostElm, hostId);\n  childRenderNodes.map(function (c) {\n    var orgLocationId = c.$hostId$ + '.' + c.$nodeId$;\n    var orgLocationNode = plt.$orgLocNodes$.get(orgLocationId);\n    var node = c.$elm$;\n\n    if (orgLocationNode && supportsShadow && orgLocationNode['s-en'] === '') {\n      orgLocationNode.parentNode.insertBefore(node, orgLocationNode.nextSibling);\n    }\n\n    if (!shadowRoot) {\n      node['s-hn'] = tagName;\n\n      if (orgLocationNode) {\n        node['s-ol'] = orgLocationNode;\n        node['s-ol']['s-nr'] = node;\n      }\n    }\n\n    plt.$orgLocNodes$.delete(orgLocationId);\n  });\n\n  if (shadowRoot) {\n    shadowRootNodes.map(function (shadowRootNode) {\n      if (shadowRootNode) {\n        shadowRoot.appendChild(shadowRootNode);\n      }\n    });\n  }\n\n  endHydrate();\n};\n\nvar clientHydrate = function clientHydrate(parentVNode, childRenderNodes, slotNodes, shadowRootNodes, hostElm, node, hostId) {\n  var childNodeType;\n  var childIdSplt;\n  var childVNode;\n  var i;\n\n  if (node.nodeType === 1\n  /* ElementNode */\n  ) {\n      childNodeType = node.getAttribute(HYDRATE_CHILD_ID);\n\n      if (childNodeType) {\n        // got the node data from the element's attribute\n        // `${hostId}.${nodeId}.${depth}.${index}`\n        childIdSplt = childNodeType.split('.');\n\n        if (childIdSplt[0] === hostId || childIdSplt[0] === '0') {\n          childVNode = {\n            $flags$: 0,\n            $hostId$: childIdSplt[0],\n            $nodeId$: childIdSplt[1],\n            $depth$: childIdSplt[2],\n            $index$: childIdSplt[3],\n            $tag$: node.tagName.toLowerCase(),\n            $elm$: node,\n            $attrs$: null,\n            $children$: null,\n            $key$: null,\n            $name$: null,\n            $text$: null\n          };\n          childRenderNodes.push(childVNode);\n          node.removeAttribute(HYDRATE_CHILD_ID); // this is a new child vnode\n          // so ensure its parent vnode has the vchildren array\n\n          if (!parentVNode.$children$) {\n            parentVNode.$children$ = [];\n          } // add our child vnode to a specific index of the vnode's children\n\n\n          parentVNode.$children$[childVNode.$index$] = childVNode; // this is now the new parent vnode for all the next child checks\n\n          parentVNode = childVNode;\n\n          if (shadowRootNodes && childVNode.$depth$ === '0') {\n            shadowRootNodes[childVNode.$index$] = childVNode.$elm$;\n          }\n        }\n      } // recursively drill down, end to start so we can remove nodes\n\n\n      for (i = node.childNodes.length - 1; i >= 0; i--) {\n        clientHydrate(parentVNode, childRenderNodes, slotNodes, shadowRootNodes, hostElm, node.childNodes[i], hostId);\n      }\n\n      if (node.shadowRoot) {\n        // keep drilling down through the shadow root nodes\n        for (i = node.shadowRoot.childNodes.length - 1; i >= 0; i--) {\n          clientHydrate(parentVNode, childRenderNodes, slotNodes, shadowRootNodes, hostElm, node.shadowRoot.childNodes[i], hostId);\n        }\n      }\n    } else if (node.nodeType === 8\n  /* CommentNode */\n  ) {\n      // `${COMMENT_TYPE}.${hostId}.${nodeId}.${depth}.${index}`\n      childIdSplt = node.nodeValue.split('.');\n\n      if (childIdSplt[1] === hostId || childIdSplt[1] === '0') {\n        // comment node for either the host id or a 0 host id\n        childNodeType = childIdSplt[0];\n        childVNode = {\n          $flags$: 0,\n          $hostId$: childIdSplt[1],\n          $nodeId$: childIdSplt[2],\n          $depth$: childIdSplt[3],\n          $index$: childIdSplt[4],\n          $elm$: node,\n          $attrs$: null,\n          $children$: null,\n          $key$: null,\n          $name$: null,\n          $tag$: null,\n          $text$: null\n        };\n\n        if (childNodeType === TEXT_NODE_ID) {\n          childVNode.$elm$ = node.nextSibling;\n\n          if (childVNode.$elm$ && childVNode.$elm$.nodeType === 3\n          /* TextNode */\n          ) {\n              childVNode.$text$ = childVNode.$elm$.textContent;\n              childRenderNodes.push(childVNode); // remove the text comment since it's no longer needed\n\n              node.remove();\n\n              if (!parentVNode.$children$) {\n                parentVNode.$children$ = [];\n              }\n\n              parentVNode.$children$[childVNode.$index$] = childVNode;\n\n              if (shadowRootNodes && childVNode.$depth$ === '0') {\n                shadowRootNodes[childVNode.$index$] = childVNode.$elm$;\n              }\n            }\n        } else if (childVNode.$hostId$ === hostId) {\n          // this comment node is specifcally for this host id\n          if (childNodeType === SLOT_NODE_ID) {\n            // `${SLOT_NODE_ID}.${hostId}.${nodeId}.${depth}.${index}.${slotName}`;\n            childVNode.$tag$ = 'slot';\n\n            if (childIdSplt[5]) {\n              node['s-sn'] = childVNode.$name$ = childIdSplt[5];\n            } else {\n              node['s-sn'] = '';\n            }\n\n            node['s-sr'] = true;\n\n            if (shadowRootNodes) {\n              // browser support shadowRoot and this is a shadow dom component\n              // create an actual slot element\n              childVNode.$elm$ = doc.createElement(childVNode.$tag$);\n\n              if (childVNode.$name$) {\n                // add the slot name attribute\n                childVNode.$elm$.setAttribute('name', childVNode.$name$);\n              } // insert the new slot element before the slot comment\n\n\n              node.parentNode.insertBefore(childVNode.$elm$, node); // remove the slot comment since it's not needed for shadow\n\n              node.remove();\n\n              if (childVNode.$depth$ === '0') {\n                shadowRootNodes[childVNode.$index$] = childVNode.$elm$;\n              }\n            }\n\n            slotNodes.push(childVNode);\n\n            if (!parentVNode.$children$) {\n              parentVNode.$children$ = [];\n            }\n\n            parentVNode.$children$[childVNode.$index$] = childVNode;\n          } else if (childNodeType === CONTENT_REF_ID) {\n            // `${CONTENT_REF_ID}.${hostId}`;\n            if (shadowRootNodes) {\n              // remove the content ref comment since it's not needed for shadow\n              node.remove();\n            } else {\n              hostElm['s-cr'] = node;\n              node['s-cn'] = true;\n            }\n          }\n        }\n      }\n    } else if (parentVNode && parentVNode.$tag$ === 'style') {\n    var vnode = newVNode(null, node.textContent);\n    vnode.$elm$ = node;\n    vnode.$index$ = '0';\n    parentVNode.$children$ = [vnode];\n  }\n};\n\nvar initializeDocumentHydrate = function initializeDocumentHydrate(node, orgLocNodes) {\n  if (node.nodeType === 1\n  /* ElementNode */\n  ) {\n      var i = 0;\n\n      for (; i < node.childNodes.length; i++) {\n        initializeDocumentHydrate(node.childNodes[i], orgLocNodes);\n      }\n\n      if (node.shadowRoot) {\n        for (i = 0; i < node.shadowRoot.childNodes.length; i++) {\n          initializeDocumentHydrate(node.shadowRoot.childNodes[i], orgLocNodes);\n        }\n      }\n    } else if (node.nodeType === 8\n  /* CommentNode */\n  ) {\n      var childIdSplt = node.nodeValue.split('.');\n\n      if (childIdSplt[0] === ORG_LOCATION_ID) {\n        orgLocNodes.set(childIdSplt[1] + '.' + childIdSplt[2], node);\n        node.nodeValue = ''; // useful to know if the original location is\n        // the root light-dom of a shadow dom component\n\n        node['s-en'] = childIdSplt[3];\n      }\n    }\n};\n\nvar parsePropertyValue = function parsePropertyValue(propValue, propType) {\n  // ensure this value is of the correct prop type\n  if (propValue != null && !isComplexType(propValue)) {\n    if (propType & 4\n    /* Boolean */\n    ) {\n        // per the HTML spec, any string value means it is a boolean true value\n        // but we'll cheat here and say that the string \"false\" is the boolean false\n        return propValue === 'false' ? false : propValue === '' || !!propValue;\n      }\n\n    if (propType & 2\n    /* Number */\n    ) {\n        // force it to be a number\n        return parseFloat(propValue);\n      }\n\n    if (propType & 1\n    /* String */\n    ) {\n        // could have been passed as a number or boolean\n        // but we still want it as a string\n        return String(propValue);\n      } // redundant return here for better minification\n\n\n    return propValue;\n  } // not sure exactly what type we want\n  // so no need to change to a different type\n\n\n  return propValue;\n};\n\nvar getValue = function getValue(ref, propName) {\n  return getHostRef(ref).$instanceValues$.get(propName);\n};\n\nvar setValue = function setValue(ref, propName, newVal, cmpMeta) {\n  // check our new property value against our internal value\n  var hostRef = getHostRef(ref);\n  var oldVal = hostRef.$instanceValues$.get(propName);\n  var flags = hostRef.$flags$;\n  var instance = hostRef.$lazyInstance$;\n  newVal = parsePropertyValue(newVal, cmpMeta.$members$[propName][0]);\n\n  if ((!(flags & 8\n  /* isConstructingInstance */\n  ) || oldVal === undefined) && newVal !== oldVal) {\n    // gadzooks! the property's value has changed!!\n    // set our new value!\n    hostRef.$instanceValues$.set(propName, newVal);\n\n    if (instance) {\n      // get an array of method names of watch functions to call\n      if (cmpMeta.$watchers$ && flags & 128\n      /* isWatchReady */\n      ) {\n          var watchMethods = cmpMeta.$watchers$[propName];\n\n          if (watchMethods) {\n            // this instance is watching for when this property changed\n            watchMethods.map(function (watchMethodName) {\n              try {\n                // fire off each of the watch methods that are watching this property\n                instance[watchMethodName](newVal, oldVal, propName);\n              } catch (e) {\n                consoleError(e);\n              }\n            });\n          }\n        }\n\n      if ((flags & (2\n      /* hasRendered */\n      | 16\n      /* isQueuedForUpdate */\n      )) === 2\n      /* hasRendered */\n      ) {\n          // looks like this value actually changed, so we've got work to do!\n          // but only if we've already rendered, otherwise just chill out\n          // queue that we need to do an update, but don't worry about queuing\n          // up millions cuz this function ensures it only runs once\n          scheduleUpdate(hostRef, false);\n        }\n    }\n  }\n};\n\nvar proxyComponent = function proxyComponent(Cstr, cmpMeta, flags) {\n  if (cmpMeta.$members$) {\n    if (Cstr.watchers) {\n      cmpMeta.$watchers$ = Cstr.watchers;\n    } // It's better to have a const than two Object.entries()\n\n\n    var members = Object.entries(cmpMeta.$members$);\n    var prototype = Cstr.prototype;\n    members.map(function (_ref11) {\n      var _ref12 = _slicedToArray(_ref11, 2),\n          memberName = _ref12[0],\n          _ref12$ = _slicedToArray(_ref12[1], 1),\n          memberFlags = _ref12$[0];\n\n      if (memberFlags & 31\n      /* Prop */\n      || flags & 2\n      /* proxyState */\n      && memberFlags & 32\n      /* State */\n      ) {\n        // proxyComponent - prop\n        Object.defineProperty(prototype, memberName, {\n          get: function get() {\n            // proxyComponent, get value\n            return getValue(this, memberName);\n          },\n          set: function set(newValue) {\n            // proxyComponent, set value\n            setValue(this, memberName, newValue, cmpMeta);\n          },\n          configurable: true,\n          enumerable: true\n        });\n      } else if (flags & 1\n      /* isElementConstructor */\n      && memberFlags & 64\n      /* Method */\n      ) {\n          // proxyComponent - method\n          Object.defineProperty(prototype, memberName, {\n            value: function value() {\n              for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n                args[_key2] = arguments[_key2];\n              }\n\n              var ref = getHostRef(this);\n              return ref.$onInstancePromise$.then(function () {\n                var _ref$$lazyInstance$;\n\n                return (_ref$$lazyInstance$ = ref.$lazyInstance$)[memberName].apply(_ref$$lazyInstance$, args);\n              });\n            }\n          });\n        }\n    });\n\n    if (flags & 1\n    /* isElementConstructor */\n    ) {\n        var attrNameToPropName = new Map();\n\n        prototype.attributeChangedCallback = function (attrName, _oldValue, newValue) {\n          var _this = this;\n\n          plt.jmp(function () {\n            var propName = attrNameToPropName.get(attrName);\n            _this[propName] = newValue === null && typeof _this[propName] === 'boolean' ? false : newValue;\n          });\n        }; // create an array of attributes to observe\n        // and also create a map of html attribute name to js property name\n\n\n        Cstr.observedAttributes = members.filter(function (_ref13) {\n          var _ref14 = _slicedToArray(_ref13, 2),\n              _ = _ref14[0],\n              m = _ref14[1];\n\n          return m[0] & 15;\n        }\n        /* HasAttribute */\n        ) // filter to only keep props that should match attributes\n        .map(function (_ref15) {\n          var _ref16 = _slicedToArray(_ref15, 2),\n              propName = _ref16[0],\n              m = _ref16[1];\n\n          var attrName = m[1] || propName;\n          attrNameToPropName.set(attrName, propName);\n\n          if (m[0] & 512\n          /* ReflectAttr */\n          ) {\n              cmpMeta.$attrsToReflect$.push([propName, attrName]);\n            }\n\n          return attrName;\n        });\n      }\n  }\n\n  return Cstr;\n};\n\nvar initializeComponent = /*#__PURE__*/function () {\n  var _ref17 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(elm, hostRef, cmpMeta, hmrVersionId, Cstr) {\n    var endLoad, endNewInstance, _scopeId, endRegisterStyles, style, ancestorComponent, schedule;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!((hostRef.$flags$ & 32\n            /* hasInitializedComponent */\n            ) === 0)) {\n              _context.next = 29;\n              break;\n            }\n\n            // we haven't initialized this element yet\n            hostRef.$flags$ |= 32\n            /* hasInitializedComponent */\n            ;\n\n            if (hostRef.$modeName$ == null) {\n              // initializeComponent\n              // looks like mode wasn't set as a property directly yet\n              // first check if there's an attribute\n              // next check the app's global\n              hostRef.$modeName$ = typeof cmpMeta.$lazyBundleIds$ !== 'string' ? computeMode(elm) : '';\n            }\n\n            // lazy loaded components\n            // request the component's implementation to be\n            // wired up with the host element\n            Cstr = loadModule(cmpMeta, hostRef);\n\n            if (!Cstr.then) {\n              _context.next = 10;\n              break;\n            }\n\n            // Await creates a micro-task avoid if possible\n            endLoad = uniqueTime();\n            _context.next = 8;\n            return Cstr;\n\n          case 8:\n            Cstr = _context.sent;\n            endLoad();\n\n          case 10:\n            if (!Cstr.isProxied) {\n              // we'eve never proxied this Constructor before\n              // let's add the getters/setters to its prototype before\n              // the first time we create an instance of the implementation\n              {\n                cmpMeta.$watchers$ = Cstr.watchers;\n              }\n              proxyComponent(Cstr, cmpMeta, 2\n              /* proxyState */\n              );\n              Cstr.isProxied = true;\n            }\n\n            endNewInstance = createTime('createInstance', cmpMeta.$tagName$); // ok, time to construct the instance\n            // but let's keep track of when we start and stop\n            // so that the getters/setters don't incorrectly step on data\n\n            hostRef.$flags$ |= 8\n            /* isConstructingInstance */\n            ;\n\n            // construct the lazy-loaded component implementation\n            // passing the hostRef is very important during\n            // construction in order to directly wire together the\n            // host element and the lazy-loaded instance\n            try {\n              new Cstr(hostRef);\n            } catch (e) {\n              consoleError(e);\n            }\n\n            hostRef.$flags$ &= ~8\n            /* isConstructingInstance */\n            ;\n            hostRef.$flags$ |= 128\n            /* isWatchReady */\n            ;\n            endNewInstance();\n            fireConnectedCallback(hostRef.$lazyInstance$);\n            _scopeId = getScopeId(cmpMeta.$tagName$, hostRef.$modeName$);\n\n            if (!(!styles.has(_scopeId) && Cstr.style)) {\n              _context.next = 29;\n              break;\n            }\n\n            endRegisterStyles = createTime('registerStyles', cmpMeta.$tagName$); // this component has styles but we haven't registered them yet\n\n            style = Cstr.style;\n\n            if (typeof style !== 'string') {\n              style = style[hostRef.$modeName$];\n            }\n\n            if (!(cmpMeta.$flags$ & 8\n            /* needsShadowDomShim */\n            )) {\n              _context.next = 27;\n              break;\n            }\n\n            _context.next = 26;\n            return import('./shadow-css-c018471d.js').then(function (m) {\n              return m.scopeCss(style, _scopeId, false);\n            });\n\n          case 26:\n            style = _context.sent;\n\n          case 27:\n            registerStyle(_scopeId, style, !!(cmpMeta.$flags$ & 1\n            /* shadowDomEncapsulation */\n            ));\n            endRegisterStyles();\n\n          case 29:\n            // we've successfully created a lazy instance\n            ancestorComponent = hostRef.$ancestorComponent$;\n\n            schedule = function schedule() {\n              return scheduleUpdate(hostRef, true);\n            };\n\n            if (ancestorComponent && ancestorComponent['s-rc']) {\n              // this is the intial load and this component it has an ancestor component\n              // but the ancestor component has NOT fired its will update lifecycle yet\n              // so let's just cool our jets and wait for the ancestor to continue first\n              // this will get fired off when the ancestor component\n              // finally gets around to rendering its lazy self\n              // fire off the initial update\n              ancestorComponent['s-rc'].push(schedule);\n            } else {\n              schedule();\n            }\n\n          case 32:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function initializeComponent(_x, _x2, _x3, _x4, _x5) {\n    return _ref17.apply(this, arguments);\n  };\n}();\n\nvar fireConnectedCallback = function fireConnectedCallback(instance) {\n  {\n    safeCall(instance, 'connectedCallback');\n  }\n};\n\nvar _connectedCallback = function connectedCallback(elm) {\n  if ((plt.$flags$ & 1\n  /* isTmpDisconnected */\n  ) === 0) {\n    var hostRef = getHostRef(elm);\n    var cmpMeta = hostRef.$cmpMeta$;\n    var endConnected = createTime('connectedCallback', cmpMeta.$tagName$);\n    {\n      // only run if we have listeners being attached to a parent\n      addHostEventListeners(elm, hostRef, cmpMeta.$listeners$, true);\n    }\n\n    if (!(hostRef.$flags$ & 1\n    /* hasConnected */\n    )) {\n      // first time this component has connected\n      hostRef.$flags$ |= 1\n      /* hasConnected */\n      ;\n      var hostId;\n      {\n        hostId = elm.getAttribute(HYDRATE_ID);\n\n        if (hostId) {\n          if (supportsShadow && cmpMeta.$flags$ & 1\n          /* shadowDomEncapsulation */\n          ) {\n              var _scopeId2 = addStyle(elm.shadowRoot, cmpMeta, elm.getAttribute('s-mode'));\n\n              elm.classList.remove(_scopeId2 + '-h', _scopeId2 + '-s');\n            }\n\n          initializeClientHydrate(elm, cmpMeta.$tagName$, hostId, hostRef);\n        }\n      }\n\n      if (!hostId) {\n        // initUpdate\n        // if the slot polyfill is required we'll need to put some nodes\n        // in here to act as original content anchors as we move nodes around\n        // host element has been connected to the DOM\n        if (cmpMeta.$flags$ & (4\n        /* hasSlotRelocation */\n        | 8\n        /* needsShadowDomShim */\n        )) {\n          setContentReference(elm);\n        }\n      }\n\n      {\n        // find the first ancestor component (if there is one) and register\n        // this component as one of the actively loading child components for its ancestor\n        var ancestorComponent = elm;\n\n        while (ancestorComponent = ancestorComponent.parentNode || ancestorComponent.host) {\n          // climb up the ancestors looking for the first\n          // component that hasn't finished its lifecycle update yet\n          if (ancestorComponent.nodeType === 1\n          /* ElementNode */\n          && ancestorComponent.hasAttribute('s-id') || ancestorComponent['s-p']) {\n            // we found this components first ancestor component\n            // keep a reference to this component's ancestor component\n            attachToAncestor(hostRef, hostRef.$ancestorComponent$ = ancestorComponent);\n            break;\n          }\n        }\n      } // Lazy properties\n      // https://developers.google.com/web/fundamentals/web-components/best-practices#lazy-properties\n\n      if (cmpMeta.$members$) {\n        Object.entries(cmpMeta.$members$).map(function (_ref18) {\n          var _ref19 = _slicedToArray(_ref18, 2),\n              memberName = _ref19[0],\n              _ref19$ = _slicedToArray(_ref19[1], 1),\n              memberFlags = _ref19$[0];\n\n          if (memberFlags & 31\n          /* Prop */\n          && elm.hasOwnProperty(memberName)) {\n            var value = elm[memberName];\n            delete elm[memberName];\n            elm[memberName] = value;\n          }\n        });\n      }\n\n      {\n        // connectedCallback, taskQueue, initialLoad\n        // angular sets attribute AFTER connectCallback\n        // https://github.com/angular/angular/issues/18909\n        // https://github.com/angular/angular/issues/19940\n        nextTick(function () {\n          return initializeComponent(elm, hostRef, cmpMeta);\n        });\n      }\n    } else {\n      // not the first time this has connected\n      // reattach any event listeners to the host\n      // since they would have been removed when disconnected\n      addHostEventListeners(elm, hostRef, cmpMeta.$listeners$, false); // fire off connectedCallback() on component instance\n\n      fireConnectedCallback(hostRef.$lazyInstance$);\n    }\n\n    endConnected();\n  }\n};\n\nvar setContentReference = function setContentReference(elm) {\n  // only required when we're NOT using native shadow dom (slot)\n  // or this browser doesn't support native shadow dom\n  // and this host element was NOT created with SSR\n  // let's pick out the inner content for slot projection\n  // create a node to represent where the original\n  // content was first placed, which is useful later on\n  var contentRefElm = elm['s-cr'] = doc.createComment('');\n  contentRefElm['s-cn'] = true;\n  elm.insertBefore(contentRefElm, elm.firstChild);\n};\n\nvar _disconnectedCallback = function disconnectedCallback(elm) {\n  if ((plt.$flags$ & 1\n  /* isTmpDisconnected */\n  ) === 0) {\n    var hostRef = getHostRef(elm);\n    var instance = hostRef.$lazyInstance$;\n    {\n      if (hostRef.$rmListeners$) {\n        hostRef.$rmListeners$.map(function (rmListener) {\n          return rmListener();\n        });\n        hostRef.$rmListeners$ = undefined;\n      }\n    } // clear CSS var-shim tracking\n\n    if (plt.$cssShim$) {\n      plt.$cssShim$.removeHost(elm);\n    }\n\n    {\n      safeCall(instance, 'disconnectedCallback');\n    }\n    {\n      safeCall(instance, 'componentDidUnload');\n    }\n  }\n};\n\nvar bootstrapLazy = function bootstrapLazy(lazyBundles) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var endBootstrap = createTime();\n  var cmpTags = [];\n  var exclude = options.exclude || [];\n  var customElements = win.customElements;\n  var head = doc.head;\n  var metaCharset = /*@__PURE__*/head.querySelector('meta[charset]');\n  var visibilityStyle = /*@__PURE__*/doc.createElement('style');\n  var deferredConnectedCallbacks = [];\n  var styles = /*@__PURE__*/doc.querySelectorAll(\"[\".concat(HYDRATED_STYLE_ID, \"]\"));\n  var appLoadFallback;\n  var isBootstrapping = true;\n  var i = 0;\n  Object.assign(plt, options);\n  plt.$resourcesUrl$ = new URL(options.resourcesUrl || './', doc.baseURI).href;\n\n  if (options.syncQueue) {\n    plt.$flags$ |= 4\n    /* queueSync */\n    ;\n  }\n\n  {\n    // If the app is already hydrated there is not point to disable the\n    // async queue. This will improve the first input delay\n    plt.$flags$ |= 2\n    /* appLoaded */\n    ;\n  }\n  {\n    for (; i < styles.length; i++) {\n      registerStyle(styles[i].getAttribute(HYDRATED_STYLE_ID), convertScopedToShadow(styles[i].innerHTML), true);\n    }\n  }\n  lazyBundles.map(function (lazyBundle) {\n    return lazyBundle[1].map(function (compactMeta) {\n      var cmpMeta = {\n        $flags$: compactMeta[0],\n        $tagName$: compactMeta[1],\n        $members$: compactMeta[2],\n        $listeners$: compactMeta[3]\n      };\n      {\n        cmpMeta.$members$ = compactMeta[2];\n      }\n      {\n        cmpMeta.$listeners$ = compactMeta[3];\n      }\n      {\n        cmpMeta.$attrsToReflect$ = [];\n      }\n      {\n        cmpMeta.$watchers$ = {};\n      }\n\n      if (!supportsShadow && cmpMeta.$flags$ & 1\n      /* shadowDomEncapsulation */\n      ) {\n          cmpMeta.$flags$ |= 8\n          /* needsShadowDomShim */\n          ;\n        }\n\n      var tagName = cmpMeta.$tagName$;\n\n      var HostElement = /*#__PURE__*/function (_HTMLElement) {\n        _inherits(HostElement, _HTMLElement);\n\n        var _super = _createSuper(HostElement);\n\n        // StencilLazyHost\n        function HostElement(self) {\n          var _this2;\n\n          _classCallCheck(this, HostElement);\n\n          // @ts-ignore\n          _this2 = _super.call(this, self);\n          self = _assertThisInitialized(_this2);\n          registerHost(self, cmpMeta);\n\n          if (cmpMeta.$flags$ & 1\n          /* shadowDomEncapsulation */\n          ) {\n              // this component is using shadow dom\n              // and this browser supports shadow dom\n              // add the read-only property \"shadowRoot\" to the host element\n              // adding the shadow root build conditionals to minimize runtime\n              if (supportsShadow) {\n                {\n                  self.attachShadow({\n                    mode: 'open'\n                  });\n                }\n              } else if (!('shadowRoot' in self)) {\n                self.shadowRoot = self;\n              }\n            }\n\n          return _this2;\n        }\n\n        _createClass(HostElement, [{\n          key: \"connectedCallback\",\n          value: function connectedCallback() {\n            var _this3 = this;\n\n            if (appLoadFallback) {\n              clearTimeout(appLoadFallback);\n              appLoadFallback = null;\n            }\n\n            if (isBootstrapping) {\n              // connectedCallback will be processed once all components have been registered\n              deferredConnectedCallbacks.push(this);\n            } else {\n              plt.jmp(function () {\n                return _connectedCallback(_this3);\n              });\n            }\n          }\n        }, {\n          key: \"disconnectedCallback\",\n          value: function disconnectedCallback() {\n            var _this4 = this;\n\n            plt.jmp(function () {\n              return _disconnectedCallback(_this4);\n            });\n          }\n        }, {\n          key: \"forceUpdate\",\n          value: function forceUpdate() {\n            _forceUpdate(this);\n          }\n        }, {\n          key: \"componentOnReady\",\n          value: function componentOnReady() {\n            return getHostRef(this).$onReadyPromise$;\n          }\n        }]);\n\n        return HostElement;\n      }( /*#__PURE__*/_wrapNativeSuper(HTMLElement));\n\n      cmpMeta.$lazyBundleIds$ = lazyBundle[0];\n\n      if (!exclude.includes(tagName) && !customElements.get(tagName)) {\n        cmpTags.push(tagName);\n        customElements.define(tagName, proxyComponent(HostElement, cmpMeta, 1\n        /* isElementConstructor */\n        ));\n      }\n    });\n  });\n  {\n    visibilityStyle.innerHTML = cmpTags + HYDRATED_CSS;\n    visibilityStyle.setAttribute('data-styles', '');\n    head.insertBefore(visibilityStyle, metaCharset ? metaCharset.nextSibling : head.firstChild);\n  } // Process deferred connectedCallbacks now all components have been registered\n\n  isBootstrapping = false;\n\n  if (deferredConnectedCallbacks.length) {\n    deferredConnectedCallbacks.map(function (host) {\n      return host.connectedCallback();\n    });\n  } else {\n    {\n      plt.jmp(function () {\n        return appLoadFallback = setTimeout(appDidLoad, 30);\n      });\n    }\n  } // Fallback appLoad event\n\n\n  endBootstrap();\n};\n\nvar getAssetPath = function getAssetPath(path) {\n  var assetUrl = new URL(path, plt.$resourcesUrl$);\n  return assetUrl.origin !== win.location.origin ? assetUrl.href : assetUrl.pathname;\n};\n\nvar hostRefs = new WeakMap();\n\nvar getHostRef = function getHostRef(ref) {\n  return hostRefs.get(ref);\n};\n\nvar registerInstance = function registerInstance(lazyInstance, hostRef) {\n  return hostRefs.set(hostRef.$lazyInstance$ = lazyInstance, hostRef);\n};\n\nvar registerHost = function registerHost(elm, cmpMeta) {\n  var hostRef = {\n    $flags$: 0,\n    $hostElement$: elm,\n    $cmpMeta$: cmpMeta,\n    $instanceValues$: new Map()\n  };\n  {\n    hostRef.$onInstancePromise$ = new Promise(function (r) {\n      return hostRef.$onInstanceResolve$ = r;\n    });\n  }\n  {\n    hostRef.$onReadyPromise$ = new Promise(function (r) {\n      return hostRef.$onReadyResolve$ = r;\n    });\n    elm['s-p'] = [];\n    elm['s-rc'] = [];\n  }\n  addHostEventListeners(elm, hostRef, cmpMeta.$listeners$, false);\n  return hostRefs.set(elm, hostRef);\n};\n\nvar isMemberInElement = function isMemberInElement(elm, memberName) {\n  return memberName in elm;\n};\n\nvar consoleError = function consoleError(e) {\n  return console.error(e);\n};\n\nvar cmpModules = /*@__PURE__*/new Map();\n\nvar loadModule = function loadModule(cmpMeta, hostRef, hmrVersionId) {\n  // loadModuleImport\n  var exportName = cmpMeta.$tagName$.replace(/-/g, '_');\n  var bundleId = typeof cmpMeta.$lazyBundleIds$ !== 'string' ? cmpMeta.$lazyBundleIds$[hostRef.$modeName$] : cmpMeta.$lazyBundleIds$;\n  var module = cmpModules.get(bundleId);\n\n  if (module) {\n    return module[exportName];\n  }\n\n  return import(\n  /* webpackInclude: /\\.entry\\.js$/ */\n\n  /* webpackExclude: /\\.system\\.entry\\.js$/ */\n\n  /* webpackMode: \"lazy\" */\n\n  /* webpackChunkName: \"stencil-[request]\" */\n  \"./\".concat(bundleId, \".entry.js\")).then(function (importedModule) {\n    {\n      cmpModules.set(bundleId, importedModule);\n    }\n    return importedModule[exportName];\n  }, consoleError);\n};\n\nvar styles = new Map();\nvar modeResolutionChain = [];\nvar queueDomReads = [];\nvar queueDomWrites = [];\nvar queueDomWritesLow = [];\n\nvar queueTask = function queueTask(queue, write) {\n  return function (cb) {\n    queue.push(cb);\n\n    if (!queuePending) {\n      queuePending = true;\n\n      if (write && plt.$flags$ & 4\n      /* queueSync */\n      ) {\n          nextTick(flush);\n        } else {\n        plt.raf(flush);\n      }\n    }\n  };\n};\n\nvar consume = function consume(queue) {\n  for (var i = 0; i < queue.length; i++) {\n    try {\n      queue[i](performance.now());\n    } catch (e) {\n      consoleError(e);\n    }\n  }\n\n  queue.length = 0;\n};\n\nvar consumeTimeout = function consumeTimeout(queue, timeout) {\n  var i = 0;\n  var ts = 0;\n\n  while (i < queue.length && (ts = performance.now()) < timeout) {\n    try {\n      queue[i++](ts);\n    } catch (e) {\n      consoleError(e);\n    }\n  }\n\n  if (i === queue.length) {\n    queue.length = 0;\n  } else if (i !== 0) {\n    queue.splice(0, i);\n  }\n};\n\nvar flush = function flush() {\n  queueCongestion++; // always force a bunch of medium callbacks to run, but still have\n  // a throttle on how many can run in a certain time\n  // DOM READS!!!\n\n  consume(queueDomReads);\n  var timeout = (plt.$flags$ & 6\n  /* queueMask */\n  ) === 2\n  /* appLoaded */\n  ? performance.now() + 10 * Math.ceil(queueCongestion * (1.0 / 22.0)) : Infinity; // DOM WRITES!!!\n\n  consumeTimeout(queueDomWrites, timeout);\n  consumeTimeout(queueDomWritesLow, timeout);\n\n  if (queueDomWrites.length > 0) {\n    queueDomWritesLow.push.apply(queueDomWritesLow, queueDomWrites);\n    queueDomWrites.length = 0;\n  }\n\n  if (queuePending = queueDomReads.length + queueDomWrites.length + queueDomWritesLow.length > 0) {\n    // still more to do yet, but we've run out of time\n    // let's let this thing cool off and try again in the next tick\n    plt.raf(flush);\n  } else {\n    queueCongestion = 0;\n  }\n};\n\nvar nextTick = /*@__PURE__*/function nextTick(cb) {\n  return promiseResolve().then(cb);\n};\n\nvar readTask = /*@__PURE__*/queueTask(queueDomReads, false);\nvar writeTask = /*@__PURE__*/queueTask(queueDomWrites, true);\nvar Build = {\n  isDev: false,\n  isBrowser: true,\n  isServer: false,\n  isTesting: false\n};\n\nvar patchEsm = function patchEsm() {\n  // @ts-ignore\n  if (!(CSS && CSS.supports && CSS.supports('color', 'var(--c)'))) {\n    // @ts-ignore\n    return import(\n    /* webpackChunkName: \"stencil-polyfills-css-shim\" */\n    './css-shim-c6f94a39.js').then(function () {\n      if (plt.$cssShim$ = win.__cssshim) {\n        return plt.$cssShim$.i();\n      } else {\n        // for better minification\n        return 0;\n      }\n    });\n  }\n\n  return promiseResolve();\n};\n\nvar patchBrowser = function patchBrowser() {\n  {\n    // shim css vars\n    plt.$cssShim$ = win.__cssshim;\n  } // @ts-ignore\n\n  var scriptElm = Array.from(doc.querySelectorAll('script')).find(function (s) {\n    return new RegExp(\"/\".concat(NAMESPACE, \"(\\\\.esm)?\\\\.js($|\\\\?|#)\")).test(s.src) || s.getAttribute('data-stencil-namespace') === NAMESPACE;\n  });\n  var opts = scriptElm['data-opts'] || {};\n\n  if ('onbeforeload' in scriptElm && !history.scrollRestoration\n  /* IS_ESM_BUILD */\n  ) {\n      // Safari < v11 support: This IF is true if it's Safari below v11.\n      // This fn cannot use async/await since Safari didn't support it until v11,\n      // however, Safari 10 did support modules. Safari 10 also didn't support \"nomodule\",\n      // so both the ESM file and nomodule file would get downloaded. Only Safari\n      // has 'onbeforeload' in the script, and \"history.scrollRestoration\" was added\n      // to Safari in v11. Return a noop then() so the async/await ESM code doesn't continue.\n      // IS_ESM_BUILD is replaced at build time so this check doesn't happen in systemjs builds.\n      return {\n        then: function then() {\n          /* promise noop */\n        }\n      };\n    }\n\n  {\n    opts.resourcesUrl = new URL('.', new URL(scriptElm.getAttribute('data-resources-url') || scriptElm.src, win.location.href)).href;\n    {\n      patchDynamicImport(opts.resourcesUrl, scriptElm);\n    }\n\n    if (!win.customElements) {\n      // module support, but no custom elements support (Old Edge)\n      // @ts-ignore\n      return import(\n      /* webpackChunkName: \"stencil-polyfills-dom\" */\n      './dom-17330dd2.js').then(function () {\n        return opts;\n      });\n    }\n  }\n  return promiseResolve(opts);\n};\n\nvar patchDynamicImport = function patchDynamicImport(base, orgScriptElm) {\n  var importFunctionName = getDynamicImportFunction(NAMESPACE);\n\n  try {\n    // test if this browser supports dynamic imports\n    // There is a caching issue in V8, that breaks using import() in Function\n    // By generating a random string, we can workaround it\n    // Check https://bugs.chromium.org/p/chromium/issues/detail?id=990810 for more info\n    win[importFunctionName] = new Function('w', \"return import(w);//\".concat(Math.random()));\n  } catch (e) {\n    // this shim is specifically for browsers that do support \"esm\" imports\n    // however, they do NOT support \"dynamic\" imports\n    // basically this code is for old Edge, v18 and below\n    var moduleMap = new Map();\n\n    win[importFunctionName] = function (src) {\n      var url = new URL(src, base).href;\n      var mod = moduleMap.get(url);\n\n      if (!mod) {\n        var script = doc.createElement('script');\n        script.type = 'module';\n        script.crossOrigin = orgScriptElm.crossOrigin;\n        script.src = URL.createObjectURL(new Blob([\"import * as m from '\".concat(url, \"'; window.\").concat(importFunctionName, \".m = m;\")], {\n          type: 'application/javascript'\n        }));\n        mod = new Promise(function (resolve) {\n          script.onload = function () {\n            resolve(win[importFunctionName].m);\n            script.remove();\n          };\n        });\n        moduleMap.set(url, mod);\n        doc.head.appendChild(script);\n      }\n\n      return mod;\n    };\n  }\n};\n\nexport { Build as B, Host as H, patchEsm as a, bootstrapLazy as b, getAssetPath as c, createEvent as d, getElement as e, readTask as f, getMode as g, h, _forceUpdate as i, patchBrowser as p, registerInstance as r, setMode as s, writeTask as w };","map":{"version":3,"sources":["/Users/mac/Documents/WorkSpace/Pfizer/Capacitor/MyCapacitor/node_modules/@ionic/core/dist/esm-es5/index-2cd7e630.js"],"names":["NAMESPACE","scopeId","contentRef","hostTagName","useNativeShadowDom","checkSlotFallbackVisibility","checkSlotRelocate","isSvgMode","queueCongestion","queuePending","win","window","CSS","doc","document","head","plt","$flags$","$resourcesUrl$","jmp","h","raf","requestAnimationFrame","ael","el","eventName","listener","opts","addEventListener","rel","removeEventListener","supportsShadow","attachShadow","indexOf","promiseResolve","v","Promise","resolve","supportsConstructibleStylesheets","CSSStyleSheet","e","addHostEventListeners","elm","hostRef","listeners","attachParentListeners","filter","flags","map","name","method","target","getHostListenerTarget","handler","hostListenerProxy","hostListenerOpts","$rmListeners$","push","methodName","ev","$lazyInstance$","$queuedListeners$","body","parentElement","CONTENT_REF_ID","ORG_LOCATION_ID","SLOT_NODE_ID","TEXT_NODE_ID","HYDRATE_ID","HYDRATED_STYLE_ID","HYDRATE_CHILD_ID","HYDRATED_CSS","XLINK_NS","createTime","fnName","tagName","uniqueTime","key","measureText","rootAppliedStyles","WeakMap","registerStyle","cssText","allowCS","style","styles","get","replace","set","addStyle","styleContainerNode","cmpMeta","mode","hostElm","getScopeId","$tagName$","nodeType","appliedStyles","styleElm","Set","has","host","querySelector","innerHTML","$cssShim$","createHostStyle","newScopeId","createElement","insertBefore","add","adoptedStyleSheets","includes","attachStyles","$cmpMeta$","$hostElement$","endAttachStyles","shadowRoot","getRootNode","$modeName$","classList","convertScopedToShadow","css","computeMode","modeResolutionChain","find","m","setMode","getMode","ref","getHostRef","EMPTY_OBJ","SVG_NS","HTML_NS","isDef","isComplexType","o","getDynamicImportFunction","namespace","nodeName","vnodeData","child","slotName","simple","lastSimple","vNodeChildren","walk","c","i","length","Array","isArray","String","$text$","newVNode","children","classData","className","class","Object","keys","k","join","vdomFnUtils","vnode","$attrs$","$children$","$key$","$name$","tag","text","$tag$","$elm$","Host","isHost","node","forEach","cb","convertToPublic","convertToPrivate","vattrs","vchildren","vkey","vname","vtag","vtext","setAccessor","memberName","oldValue","newValue","isSvg","isProp","isMemberInElement","ln","toLowerCase","oldClasses","parseClassList","newClasses","remove","prop","removeProperty","setProperty","slice","isComplex","n","xlink","removeAttributeNS","removeAttribute","setAttributeNS","setAttribute","parseClassListRegex","value","split","updateElement","oldVnode","newVnode","oldVnodeAttrs","newVnodeAttrs","undefined","createElm","oldParentVNode","newParentVNode","childIndex","parentElm","childNode","oldVNode","createTextNode","createElementNS","appendChild","putBackInOriginalLocation","recursive","oldSlotChildNodes","childNodes","parentReferenceNode","referenceNode","addVnodes","before","parentVNode","vnodes","startIdx","endIdx","containerElm","parentNode","removeVnodes","callNodeRefs","updateChildren","oldCh","newCh","oldStartIdx","newStartIdx","idxInOld","oldEndIdx","oldStartVnode","oldEndVnode","newEndIdx","newStartVnode","newEndVnode","elmToMove","isSameVnode","patch","nextSibling","vnode1","vnode2","oldChildren","newChildren","defaultHolder","textContent","data","updateFallbackSlotVisibility","ilen","j","slotNameAttr","hidden","getAttribute","trim","relocateNodes","relocateSlotContent","hostContentNodes","relocateNodeData","isNodeLocatedInSlot","r","$nodeToRelocate$","$slotRefNode$","relocateNode","some","nodeToRelocate","vNode","renderVdom","renderFnResults","$vnode$","rootVnode","$attrsToReflect$","propName","attribute","relocateData","orgLocationNode","parentNodeRef","insertBeforeNode","refNode","previousSibling","getElement","createEvent","emit","detail","emitEvent","bubbles","composed","cancelable","CustomEvent","dispatchEvent","attachToAncestor","ancestorComponent","$onRenderResolve$","scheduleUpdate","isInitialLoad","endSchedule","$ancestorComponent$","instance","update","updateComponent","promise","event","safeCall","then","writeTask","endUpdate","rc","endRender","callRender","updateHost","childrenPromises","postUpdate","postUpdateComponent","all","render","consoleError","endPostUpdate","addHydratedFlag","$onReadyResolve$","appDidLoad","$onInstanceResolve$","nextTick","forceUpdate","isConnected","who","documentElement","arg","thenFn","initializeClientHydrate","hostId","endHydrate","childRenderNodes","slotNodes","shadowRootNodes","$orgLocNodes$","initializeDocumentHydrate","Map","clientHydrate","orgLocationId","$hostId$","$nodeId$","delete","shadowRootNode","childNodeType","childIdSplt","childVNode","$depth$","$index$","nodeValue","orgLocNodes","parsePropertyValue","propValue","propType","parseFloat","getValue","$instanceValues$","setValue","newVal","oldVal","$members$","$watchers$","watchMethods","watchMethodName","proxyComponent","Cstr","watchers","members","entries","prototype","memberFlags","defineProperty","configurable","enumerable","args","$onInstancePromise$","attrNameToPropName","attributeChangedCallback","attrName","_oldValue","observedAttributes","_","initializeComponent","hmrVersionId","$lazyBundleIds$","loadModule","endLoad","isProxied","endNewInstance","fireConnectedCallback","endRegisterStyles","scopeCss","schedule","connectedCallback","endConnected","$listeners$","setContentReference","hasAttribute","hasOwnProperty","contentRefElm","createComment","firstChild","disconnectedCallback","rmListener","removeHost","bootstrapLazy","lazyBundles","options","endBootstrap","cmpTags","exclude","customElements","metaCharset","visibilityStyle","deferredConnectedCallbacks","querySelectorAll","appLoadFallback","isBootstrapping","assign","URL","resourcesUrl","baseURI","href","syncQueue","lazyBundle","compactMeta","HostElement","self","registerHost","clearTimeout","$onReadyPromise$","HTMLElement","define","setTimeout","getAssetPath","path","assetUrl","origin","location","pathname","hostRefs","registerInstance","lazyInstance","console","error","cmpModules","exportName","bundleId","module","importedModule","queueDomReads","queueDomWrites","queueDomWritesLow","queueTask","queue","write","flush","consume","performance","now","consumeTimeout","timeout","ts","splice","Math","ceil","Infinity","readTask","Build","isDev","isBrowser","isServer","isTesting","patchEsm","supports","__cssshim","patchBrowser","scriptElm","from","s","RegExp","test","src","history","scrollRestoration","patchDynamicImport","base","orgScriptElm","importFunctionName","Function","random","moduleMap","url","mod","script","type","crossOrigin","createObjectURL","Blob","onload","B","H","a","b","d","f","g","p","w"],"mappings":"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","sourcesContent":["const NAMESPACE = 'ionic';\n\nlet scopeId;\nlet contentRef;\nlet hostTagName;\nlet useNativeShadowDom = false;\nlet checkSlotFallbackVisibility = false;\nlet checkSlotRelocate = false;\nlet isSvgMode = false;\nlet queueCongestion = 0;\nlet queuePending = false;\nconst win = typeof window !== 'undefined' ? window : {};\nconst CSS =  win.CSS ;\nconst doc = win.document || { head: {} };\nconst plt = {\n    $flags$: 0,\n    $resourcesUrl$: '',\n    jmp: h => h(),\n    raf: h => requestAnimationFrame(h),\n    ael: (el, eventName, listener, opts) => el.addEventListener(eventName, listener, opts),\n    rel: (el, eventName, listener, opts) => el.removeEventListener(eventName, listener, opts),\n};\nconst supportsShadow =  /*@__PURE__*/ (() => (doc.head.attachShadow + '').indexOf('[native') > -1)() ;\nconst promiseResolve = (v) => Promise.resolve(v);\nconst supportsConstructibleStylesheets =  /*@__PURE__*/ (() => {\n        try {\n            new CSSStyleSheet();\n            return true;\n        }\n        catch (e) { }\n        return false;\n    })()\n    ;\nconst addHostEventListeners = (elm, hostRef, listeners, attachParentListeners) => {\n    if ( listeners) {\n        // this is called immediately within the element's constructor\n        // initialize our event listeners on the host element\n        // we do this now so that we can listen to events that may\n        // have fired even before the instance is ready\n        {\n            // this component may have event listeners that should be attached to the parent\n            if (attachParentListeners) {\n                // this is being ran from within the connectedCallback\n                // which is important so that we know the host element actually has a parent element\n                // filter out the listeners to only have the ones that ARE being attached to the parent\n                listeners = listeners.filter(([flags]) => flags & 16 /* TargetParent */);\n            }\n            else {\n                // this is being ran from within the component constructor\n                // everything BUT the parent element listeners should be attached at this time\n                // filter out the listeners that are NOT being attached to the parent\n                listeners = listeners.filter(([flags]) => !(flags & 16 /* TargetParent */));\n            }\n        }\n        listeners.map(([flags, name, method]) => {\n            const target =  getHostListenerTarget(elm, flags) ;\n            const handler = hostListenerProxy(hostRef, method);\n            const opts = hostListenerOpts(flags);\n            plt.ael(target, name, handler, opts);\n            (hostRef.$rmListeners$ = hostRef.$rmListeners$ || []).push(() => plt.rel(target, name, handler, opts));\n        });\n    }\n};\nconst hostListenerProxy = (hostRef, methodName) => (ev) => {\n    {\n        if (hostRef.$flags$ & 256 /* isListenReady */) {\n            // instance is ready, let's call it's member method for this event\n            hostRef.$lazyInstance$[methodName](ev);\n        }\n        else {\n            (hostRef.$queuedListeners$ = hostRef.$queuedListeners$ || []).push([methodName, ev]);\n        }\n    }\n};\nconst getHostListenerTarget = (elm, flags) => {\n    if ( flags & 4 /* TargetDocument */)\n        return doc;\n    if ( flags & 8 /* TargetWindow */)\n        return win;\n    if ( flags & 32 /* TargetBody */)\n        return doc.body;\n    if ( flags & 16 /* TargetParent */)\n        return elm.parentElement;\n    return elm;\n};\n// prettier-ignore\nconst hostListenerOpts = (flags) =>  (flags & 2 /* Capture */) !== 0;\nconst CONTENT_REF_ID = 'r';\nconst ORG_LOCATION_ID = 'o';\nconst SLOT_NODE_ID = 's';\nconst TEXT_NODE_ID = 't';\nconst HYDRATE_ID = 's-id';\nconst HYDRATED_STYLE_ID = 'sty-id';\nconst HYDRATE_CHILD_ID = 'c-id';\nconst HYDRATED_CSS = '{visibility:hidden}.hydrated{visibility:inherit}';\nconst XLINK_NS = 'http://www.w3.org/1999/xlink';\nconst createTime = (fnName, tagName = '') => {\n    {\n        return () => {\n            return;\n        };\n    }\n};\nconst uniqueTime = (key, measureText) => {\n    {\n        return () => {\n            return;\n        };\n    }\n};\nconst rootAppliedStyles = new WeakMap();\nconst registerStyle = (scopeId, cssText, allowCS) => {\n    let style = styles.get(scopeId);\n    if (supportsConstructibleStylesheets && allowCS) {\n        style = (style || new CSSStyleSheet());\n        style.replace(cssText);\n    }\n    else {\n        style = cssText;\n    }\n    styles.set(scopeId, style);\n};\nconst addStyle = (styleContainerNode, cmpMeta, mode, hostElm) => {\n    let scopeId =  getScopeId(cmpMeta.$tagName$, mode) ;\n    let style = styles.get(scopeId);\n    // if an element is NOT connected then getRootNode() will return the wrong root node\n    // so the fallback is to always use the document for the root node in those cases\n    styleContainerNode = styleContainerNode.nodeType === 11 /* DocumentFragment */ ? styleContainerNode : doc;\n    if ( !style) {\n        scopeId = getScopeId(cmpMeta.$tagName$);\n        style = styles.get(scopeId);\n    }\n    if (style) {\n        if (typeof style === 'string') {\n            styleContainerNode = styleContainerNode.head || styleContainerNode;\n            let appliedStyles = rootAppliedStyles.get(styleContainerNode);\n            let styleElm;\n            if (!appliedStyles) {\n                rootAppliedStyles.set(styleContainerNode, (appliedStyles = new Set()));\n            }\n            if (!appliedStyles.has(scopeId)) {\n                if ( styleContainerNode.host && (styleElm = styleContainerNode.querySelector(`[${HYDRATED_STYLE_ID}=\"${scopeId}\"]`))) {\n                    // This is only happening on native shadow-dom, do not needs CSS var shim\n                    styleElm.innerHTML = style;\n                }\n                else {\n                    if ( plt.$cssShim$) {\n                        styleElm = plt.$cssShim$.createHostStyle(hostElm, scopeId, style, !!(cmpMeta.$flags$ & 10 /* needsScopedEncapsulation */));\n                        const newScopeId = styleElm['s-sc'];\n                        if (newScopeId) {\n                            scopeId = newScopeId;\n                            // we don't want to add this styleID to the appliedStyles Set\n                            // since the cssVarShim might need to apply several different\n                            // stylesheets for the same component\n                            appliedStyles = null;\n                        }\n                    }\n                    else {\n                        styleElm = doc.createElement('style');\n                        styleElm.innerHTML = style;\n                    }\n                    styleContainerNode.insertBefore(styleElm, styleContainerNode.querySelector('link'));\n                }\n                if (appliedStyles) {\n                    appliedStyles.add(scopeId);\n                }\n            }\n        }\n        else if ( !styleContainerNode.adoptedStyleSheets.includes(style)) {\n            styleContainerNode.adoptedStyleSheets = [...styleContainerNode.adoptedStyleSheets, style];\n        }\n    }\n    return scopeId;\n};\nconst attachStyles = (hostRef) => {\n    const cmpMeta = hostRef.$cmpMeta$;\n    const elm = hostRef.$hostElement$;\n    const flags = cmpMeta.$flags$;\n    const endAttachStyles = createTime('attachStyles', cmpMeta.$tagName$);\n    const scopeId = addStyle( supportsShadow && elm.shadowRoot ? elm.shadowRoot : elm.getRootNode(), cmpMeta, hostRef.$modeName$, elm);\n    if ( flags & 10 /* needsScopedEncapsulation */) {\n        // only required when we're NOT using native shadow dom (slot)\n        // or this browser doesn't support native shadow dom\n        // and this host element was NOT created with SSR\n        // let's pick out the inner content for slot projection\n        // create a node to represent where the original\n        // content was first placed, which is useful later on\n        // DOM WRITE!!\n        elm['s-sc'] = scopeId;\n        elm.classList.add(scopeId + '-h');\n        if ( flags & 2 /* scopedCssEncapsulation */) {\n            elm.classList.add(scopeId + '-s');\n        }\n    }\n    endAttachStyles();\n};\nconst getScopeId = (tagName, mode) => 'sc-' + ( mode ? tagName + '-' + mode : tagName);\nconst convertScopedToShadow = (css) => css.replace(/\\/\\*!@([^\\/]+)\\*\\/[^\\{]+\\{/g, '$1{');\n// Private\nconst computeMode = (elm) => modeResolutionChain.map(h => h(elm)).find(m => !!m);\n// Public\nconst setMode = (handler) => modeResolutionChain.push(handler);\nconst getMode = (ref) => getHostRef(ref).$modeName$;\n/**\n * Default style mode id\n */\n/**\n * Reusable empty obj/array\n * Don't add values to these!!\n */\nconst EMPTY_OBJ = {};\n/**\n * Namespaces\n */\nconst SVG_NS = 'http://www.w3.org/2000/svg';\nconst HTML_NS = 'http://www.w3.org/1999/xhtml';\nconst isDef = (v) => v != null;\nconst isComplexType = (o) => {\n    // https://jsperf.com/typeof-fn-object/5\n    o = typeof o;\n    return o === 'object' || o === 'function';\n};\nconst getDynamicImportFunction = (namespace) => `__sc_import_${namespace.replace(/\\s|-/g, '_')}`;\n/**\n * Production h() function based on Preact by\n * Jason Miller (@developit)\n * Licensed under the MIT License\n * https://github.com/developit/preact/blob/master/LICENSE\n *\n * Modified for Stencil's compiler and vdom\n */\n// const stack: any[] = [];\n// export function h(nodeName: string | d.FunctionalComponent, vnodeData: d.PropsType, child?: d.ChildType): d.VNode;\n// export function h(nodeName: string | d.FunctionalComponent, vnodeData: d.PropsType, ...children: d.ChildType[]): d.VNode;\nconst h = (nodeName, vnodeData, ...children) => {\n    let child = null;\n    let key = null;\n    let slotName = null;\n    let simple = false;\n    let lastSimple = false;\n    let vNodeChildren = [];\n    const walk = (c) => {\n        for (let i = 0; i < c.length; i++) {\n            child = c[i];\n            if (Array.isArray(child)) {\n                walk(child);\n            }\n            else if (child != null && typeof child !== 'boolean') {\n                if ((simple = typeof nodeName !== 'function' && !isComplexType(child))) {\n                    child = String(child);\n                }\n                if (simple && lastSimple) {\n                    // If the previous child was simple (string), we merge both\n                    vNodeChildren[vNodeChildren.length - 1].$text$ += child;\n                }\n                else {\n                    // Append a new vNode, if it's text, we create a text vNode\n                    vNodeChildren.push(simple ? newVNode(null, child) : child);\n                }\n                lastSimple = simple;\n            }\n        }\n    };\n    walk(children);\n    if (vnodeData) {\n        // normalize class / classname attributes\n        if ( vnodeData.key) {\n            key = vnodeData.key;\n        }\n        if ( vnodeData.name) {\n            slotName = vnodeData.name;\n        }\n        {\n            const classData = vnodeData.className || vnodeData.class;\n            if (classData) {\n                vnodeData.class =\n                    typeof classData !== 'object'\n                        ? classData\n                        : Object.keys(classData)\n                            .filter(k => classData[k])\n                            .join(' ');\n            }\n        }\n    }\n    if ( typeof nodeName === 'function') {\n        // nodeName is a functional component\n        return nodeName(vnodeData === null ? {} : vnodeData, vNodeChildren, vdomFnUtils);\n    }\n    const vnode = newVNode(nodeName, null);\n    vnode.$attrs$ = vnodeData;\n    if (vNodeChildren.length > 0) {\n        vnode.$children$ = vNodeChildren;\n    }\n    {\n        vnode.$key$ = key;\n    }\n    {\n        vnode.$name$ = slotName;\n    }\n    return vnode;\n};\nconst newVNode = (tag, text) => {\n    const vnode = {\n        $flags$: 0,\n        $tag$: tag,\n        $text$: text,\n        $elm$: null,\n        $children$: null,\n    };\n    {\n        vnode.$attrs$ = null;\n    }\n    {\n        vnode.$key$ = null;\n    }\n    {\n        vnode.$name$ = null;\n    }\n    return vnode;\n};\nconst Host = {};\nconst isHost = (node) => node && node.$tag$ === Host;\nconst vdomFnUtils = {\n    forEach: (children, cb) => children.map(convertToPublic).forEach(cb),\n    map: (children, cb) => children\n        .map(convertToPublic)\n        .map(cb)\n        .map(convertToPrivate),\n};\nconst convertToPublic = (node) => ({\n    vattrs: node.$attrs$,\n    vchildren: node.$children$,\n    vkey: node.$key$,\n    vname: node.$name$,\n    vtag: node.$tag$,\n    vtext: node.$text$,\n});\nconst convertToPrivate = (node) => {\n    const vnode = newVNode(node.vtag, node.vtext);\n    vnode.$attrs$ = node.vattrs;\n    vnode.$children$ = node.vchildren;\n    vnode.$key$ = node.vkey;\n    vnode.$name$ = node.vname;\n    return vnode;\n};\n/**\n * Production setAccessor() function based on Preact by\n * Jason Miller (@developit)\n * Licensed under the MIT License\n * https://github.com/developit/preact/blob/master/LICENSE\n *\n * Modified for Stencil's compiler and vdom\n */\nconst setAccessor = (elm, memberName, oldValue, newValue, isSvg, flags) => {\n    if (oldValue !== newValue) {\n        let isProp = isMemberInElement(elm, memberName);\n        let ln = memberName.toLowerCase();\n        if ( memberName === 'class') {\n            const classList = elm.classList;\n            const oldClasses = parseClassList(oldValue);\n            const newClasses = parseClassList(newValue);\n            classList.remove(...oldClasses.filter(c => c && !newClasses.includes(c)));\n            classList.add(...newClasses.filter(c => c && !oldClasses.includes(c)));\n        }\n        else if ( memberName === 'style') {\n            // update style attribute, css properties and values\n            {\n                for (const prop in oldValue) {\n                    if (!newValue || newValue[prop] == null) {\n                        if ( prop.includes('-')) {\n                            elm.style.removeProperty(prop);\n                        }\n                        else {\n                            elm.style[prop] = '';\n                        }\n                    }\n                }\n            }\n            for (const prop in newValue) {\n                if (!oldValue || newValue[prop] !== oldValue[prop]) {\n                    if ( prop.includes('-')) {\n                        elm.style.setProperty(prop, newValue[prop]);\n                    }\n                    else {\n                        elm.style[prop] = newValue[prop];\n                    }\n                }\n            }\n        }\n        else if ( memberName === 'key')\n            ;\n        else if ( memberName === 'ref') {\n            // minifier will clean this up\n            if (newValue) {\n                newValue(elm);\n            }\n        }\n        else if ( ( !isProp ) && memberName[0] === 'o' && memberName[1] === 'n') {\n            // Event Handlers\n            // so if the member name starts with \"on\" and the 3rd characters is\n            // a capital letter, and it's not already a member on the element,\n            // then we're assuming it's an event listener\n            if (memberName[2] === '-') {\n                // on- prefixed events\n                // allows to be explicit about the dom event to listen without any magic\n                // under the hood:\n                // <my-cmp on-click> // listens for \"click\"\n                // <my-cmp on-Click> // listens for \"Click\"\n                // <my-cmp on-ionChange> // listens for \"ionChange\"\n                // <my-cmp on-EVENTS> // listens for \"EVENTS\"\n                memberName = memberName.slice(3);\n            }\n            else if (isMemberInElement(win, ln)) {\n                // standard event\n                // the JSX attribute could have been \"onMouseOver\" and the\n                // member name \"onmouseover\" is on the window's prototype\n                // so let's add the listener \"mouseover\", which is all lowercased\n                memberName = ln.slice(2);\n            }\n            else {\n                // custom event\n                // the JSX attribute could have been \"onMyCustomEvent\"\n                // so let's trim off the \"on\" prefix and lowercase the first character\n                // and add the listener \"myCustomEvent\"\n                // except for the first character, we keep the event name case\n                memberName = ln[2] + memberName.slice(3);\n            }\n            if (oldValue) {\n                plt.rel(elm, memberName, oldValue, false);\n            }\n            if (newValue) {\n                plt.ael(elm, memberName, newValue, false);\n            }\n        }\n        else {\n            // Set property if it exists and it's not a SVG\n            const isComplex = isComplexType(newValue);\n            if ((isProp || (isComplex && newValue !== null)) && !isSvg) {\n                try {\n                    if (!elm.tagName.includes('-')) {\n                        let n = newValue == null ? '' : newValue;\n                        // Workaround for Safari, moving the <input> caret when re-assigning the same valued\n                        if (memberName === 'list') {\n                            isProp = false;\n                            // tslint:disable-next-line: triple-equals\n                        }\n                        else if (oldValue == null || elm[memberName] != n) {\n                            elm[memberName] = n;\n                        }\n                    }\n                    else {\n                        elm[memberName] = newValue;\n                    }\n                }\n                catch (e) { }\n            }\n            /**\n             * Need to manually update attribute if:\n             * - memberName is not an attribute\n             * - if we are rendering the host element in order to reflect attribute\n             * - if it's a SVG, since properties might not work in <svg>\n             * - if the newValue is null/undefined or 'false'.\n             */\n            let xlink = false;\n            {\n                if (ln !== (ln = ln.replace(/^xlink\\:?/, ''))) {\n                    memberName = ln;\n                    xlink = true;\n                }\n            }\n            if (newValue == null || newValue === false) {\n                if ( xlink) {\n                    elm.removeAttributeNS(XLINK_NS, memberName);\n                }\n                else {\n                    elm.removeAttribute(memberName);\n                }\n            }\n            else if ((!isProp || flags & 4 /* isHost */ || isSvg) && !isComplex) {\n                newValue = newValue === true ? '' : newValue;\n                if ( xlink) {\n                    elm.setAttributeNS(XLINK_NS, memberName, newValue);\n                }\n                else {\n                    elm.setAttribute(memberName, newValue);\n                }\n            }\n        }\n    }\n};\nconst parseClassListRegex = /\\s/;\nconst parseClassList = (value) => (!value ? [] : value.split(parseClassListRegex));\nconst updateElement = (oldVnode, newVnode, isSvgMode, memberName) => {\n    // if the element passed in is a shadow root, which is a document fragment\n    // then we want to be adding attrs/props to the shadow root's \"host\" element\n    // if it's not a shadow root, then we add attrs/props to the same element\n    const elm = newVnode.$elm$.nodeType === 11 /* DocumentFragment */ && newVnode.$elm$.host ? newVnode.$elm$.host : newVnode.$elm$;\n    const oldVnodeAttrs = (oldVnode && oldVnode.$attrs$) || EMPTY_OBJ;\n    const newVnodeAttrs = newVnode.$attrs$ || EMPTY_OBJ;\n    {\n        // remove attributes no longer present on the vnode by setting them to undefined\n        for (memberName in oldVnodeAttrs) {\n            if (!(memberName in newVnodeAttrs)) {\n                setAccessor(elm, memberName, oldVnodeAttrs[memberName], undefined, isSvgMode, newVnode.$flags$);\n            }\n        }\n    }\n    // add new & update changed attributes\n    for (memberName in newVnodeAttrs) {\n        setAccessor(elm, memberName, oldVnodeAttrs[memberName], newVnodeAttrs[memberName], isSvgMode, newVnode.$flags$);\n    }\n};\nconst createElm = (oldParentVNode, newParentVNode, childIndex, parentElm) => {\n    // tslint:disable-next-line: prefer-const\n    let newVNode = newParentVNode.$children$[childIndex];\n    let i = 0;\n    let elm;\n    let childNode;\n    let oldVNode;\n    if ( !useNativeShadowDom) {\n        // remember for later we need to check to relocate nodes\n        checkSlotRelocate = true;\n        if (newVNode.$tag$ === 'slot') {\n            if (scopeId) {\n                // scoped css needs to add its scoped id to the parent element\n                parentElm.classList.add(scopeId + '-s');\n            }\n            newVNode.$flags$ |= newVNode.$children$\n                ? // slot element has fallback content\n                    2 /* isSlotFallback */\n                : // slot element does not have fallback content\n                    1 /* isSlotReference */;\n        }\n    }\n    if ( newVNode.$text$ !== null) {\n        // create text node\n        elm = newVNode.$elm$ = doc.createTextNode(newVNode.$text$);\n    }\n    else if ( newVNode.$flags$ & 1 /* isSlotReference */) {\n        // create a slot reference node\n        elm = newVNode.$elm$ =  doc.createTextNode('');\n    }\n    else {\n        if ( !isSvgMode) {\n            isSvgMode = newVNode.$tag$ === 'svg';\n        }\n        // create element\n        elm = newVNode.$elm$ = ( doc.createElementNS(isSvgMode ? SVG_NS : HTML_NS,  newVNode.$flags$ & 2 /* isSlotFallback */ ? 'slot-fb' : newVNode.$tag$)\n            );\n        if ( isSvgMode && newVNode.$tag$ === 'foreignObject') {\n            isSvgMode = false;\n        }\n        // add css classes, attrs, props, listeners, etc.\n        {\n            updateElement(null, newVNode, isSvgMode);\n        }\n        if ( isDef(scopeId) && elm['s-si'] !== scopeId) {\n            // if there is a scopeId and this is the initial render\n            // then let's add the scopeId as a css class\n            elm.classList.add((elm['s-si'] = scopeId));\n        }\n        if (newVNode.$children$) {\n            for (i = 0; i < newVNode.$children$.length; ++i) {\n                // create the node\n                childNode = createElm(oldParentVNode, newVNode, i, elm);\n                // return node could have been null\n                if (childNode) {\n                    // append our new node\n                    elm.appendChild(childNode);\n                }\n            }\n        }\n        {\n            if (newVNode.$tag$ === 'svg') {\n                // Only reset the SVG context when we're exiting <svg> element\n                isSvgMode = false;\n            }\n            else if (elm.tagName === 'foreignObject') {\n                // Reenter SVG context when we're exiting <foreignObject> element\n                isSvgMode = true;\n            }\n        }\n    }\n    {\n        elm['s-hn'] = hostTagName;\n        if (newVNode.$flags$ & (2 /* isSlotFallback */ | 1 /* isSlotReference */)) {\n            // remember the content reference comment\n            elm['s-sr'] = true;\n            // remember the content reference comment\n            elm['s-cr'] = contentRef;\n            // remember the slot name, or empty string for default slot\n            elm['s-sn'] = newVNode.$name$ || '';\n            // check if we've got an old vnode for this slot\n            oldVNode = oldParentVNode && oldParentVNode.$children$ && oldParentVNode.$children$[childIndex];\n            if (oldVNode && oldVNode.$tag$ === newVNode.$tag$ && oldParentVNode.$elm$) {\n                // we've got an old slot vnode and the wrapper is being replaced\n                // so let's move the old slot content back to it's original location\n                putBackInOriginalLocation(oldParentVNode.$elm$, false);\n            }\n        }\n    }\n    return elm;\n};\nconst putBackInOriginalLocation = (parentElm, recursive) => {\n    plt.$flags$ |= 1 /* isTmpDisconnected */;\n    const oldSlotChildNodes = parentElm.childNodes;\n    for (let i = oldSlotChildNodes.length - 1; i >= 0; i--) {\n        const childNode = oldSlotChildNodes[i];\n        if (childNode['s-hn'] !== hostTagName && childNode['s-ol']) {\n            // // this child node in the old element is from another component\n            // // remove this node from the old slot's parent\n            // childNode.remove();\n            // and relocate it back to it's original location\n            parentReferenceNode(childNode).insertBefore(childNode, referenceNode(childNode));\n            // remove the old original location comment entirely\n            // later on the patch function will know what to do\n            // and move this to the correct spot in need be\n            childNode['s-ol'].remove();\n            childNode['s-ol'] = undefined;\n            checkSlotRelocate = true;\n        }\n        if (recursive) {\n            putBackInOriginalLocation(childNode, recursive);\n        }\n    }\n    plt.$flags$ &= ~1 /* isTmpDisconnected */;\n};\nconst addVnodes = (parentElm, before, parentVNode, vnodes, startIdx, endIdx) => {\n    let containerElm = (( parentElm['s-cr'] && parentElm['s-cr'].parentNode) || parentElm);\n    let childNode;\n    if ( containerElm.shadowRoot && containerElm.tagName === hostTagName) {\n        containerElm = containerElm.shadowRoot;\n    }\n    for (; startIdx <= endIdx; ++startIdx) {\n        if (vnodes[startIdx]) {\n            childNode = createElm(null, parentVNode, startIdx, parentElm);\n            if (childNode) {\n                vnodes[startIdx].$elm$ = childNode;\n                containerElm.insertBefore(childNode,  referenceNode(before) );\n            }\n        }\n    }\n};\nconst removeVnodes = (vnodes, startIdx, endIdx, vnode, elm) => {\n    for (; startIdx <= endIdx; ++startIdx) {\n        if ((vnode = vnodes[startIdx])) {\n            elm = vnode.$elm$;\n            callNodeRefs(vnode);\n            {\n                // we're removing this element\n                // so it's possible we need to show slot fallback content now\n                checkSlotFallbackVisibility = true;\n                if (elm['s-ol']) {\n                    // remove the original location comment\n                    elm['s-ol'].remove();\n                }\n                else {\n                    // it's possible that child nodes of the node\n                    // that's being removed are slot nodes\n                    putBackInOriginalLocation(elm, true);\n                }\n            }\n            // remove the vnode's element from the dom\n            elm.remove();\n        }\n    }\n};\nconst updateChildren = (parentElm, oldCh, newVNode, newCh) => {\n    let oldStartIdx = 0;\n    let newStartIdx = 0;\n    let idxInOld = 0;\n    let i = 0;\n    let oldEndIdx = oldCh.length - 1;\n    let oldStartVnode = oldCh[0];\n    let oldEndVnode = oldCh[oldEndIdx];\n    let newEndIdx = newCh.length - 1;\n    let newStartVnode = newCh[0];\n    let newEndVnode = newCh[newEndIdx];\n    let node;\n    let elmToMove;\n    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n        if (oldStartVnode == null) {\n            // Vnode might have been moved left\n            oldStartVnode = oldCh[++oldStartIdx];\n        }\n        else if (oldEndVnode == null) {\n            oldEndVnode = oldCh[--oldEndIdx];\n        }\n        else if (newStartVnode == null) {\n            newStartVnode = newCh[++newStartIdx];\n        }\n        else if (newEndVnode == null) {\n            newEndVnode = newCh[--newEndIdx];\n        }\n        else if (isSameVnode(oldStartVnode, newStartVnode)) {\n            patch(oldStartVnode, newStartVnode);\n            oldStartVnode = oldCh[++oldStartIdx];\n            newStartVnode = newCh[++newStartIdx];\n        }\n        else if (isSameVnode(oldEndVnode, newEndVnode)) {\n            patch(oldEndVnode, newEndVnode);\n            oldEndVnode = oldCh[--oldEndIdx];\n            newEndVnode = newCh[--newEndIdx];\n        }\n        else if (isSameVnode(oldStartVnode, newEndVnode)) {\n            // Vnode moved right\n            if ( (oldStartVnode.$tag$ === 'slot' || newEndVnode.$tag$ === 'slot')) {\n                putBackInOriginalLocation(oldStartVnode.$elm$.parentNode, false);\n            }\n            patch(oldStartVnode, newEndVnode);\n            parentElm.insertBefore(oldStartVnode.$elm$, oldEndVnode.$elm$.nextSibling);\n            oldStartVnode = oldCh[++oldStartIdx];\n            newEndVnode = newCh[--newEndIdx];\n        }\n        else if (isSameVnode(oldEndVnode, newStartVnode)) {\n            // Vnode moved left\n            if ( (oldStartVnode.$tag$ === 'slot' || newEndVnode.$tag$ === 'slot')) {\n                putBackInOriginalLocation(oldEndVnode.$elm$.parentNode, false);\n            }\n            patch(oldEndVnode, newStartVnode);\n            parentElm.insertBefore(oldEndVnode.$elm$, oldStartVnode.$elm$);\n            oldEndVnode = oldCh[--oldEndIdx];\n            newStartVnode = newCh[++newStartIdx];\n        }\n        else {\n            // createKeyToOldIdx\n            idxInOld = -1;\n            {\n                for (i = oldStartIdx; i <= oldEndIdx; ++i) {\n                    if (oldCh[i] && oldCh[i].$key$ !== null && oldCh[i].$key$ === newStartVnode.$key$) {\n                        idxInOld = i;\n                        break;\n                    }\n                }\n            }\n            if ( idxInOld >= 0) {\n                elmToMove = oldCh[idxInOld];\n                if (elmToMove.$tag$ !== newStartVnode.$tag$) {\n                    node = createElm(oldCh && oldCh[newStartIdx], newVNode, idxInOld, parentElm);\n                }\n                else {\n                    patch(elmToMove, newStartVnode);\n                    oldCh[idxInOld] = undefined;\n                    node = elmToMove.$elm$;\n                }\n                newStartVnode = newCh[++newStartIdx];\n            }\n            else {\n                // new element\n                node = createElm(oldCh && oldCh[newStartIdx], newVNode, newStartIdx, parentElm);\n                newStartVnode = newCh[++newStartIdx];\n            }\n            if (node) {\n                {\n                    parentReferenceNode(oldStartVnode.$elm$).insertBefore(node, referenceNode(oldStartVnode.$elm$));\n                }\n            }\n        }\n    }\n    if (oldStartIdx > oldEndIdx) {\n        addVnodes(parentElm, newCh[newEndIdx + 1] == null ? null : newCh[newEndIdx + 1].$elm$, newVNode, newCh, newStartIdx, newEndIdx);\n    }\n    else if ( newStartIdx > newEndIdx) {\n        removeVnodes(oldCh, oldStartIdx, oldEndIdx);\n    }\n};\nconst isSameVnode = (vnode1, vnode2) => {\n    // compare if two vnode to see if they're \"technically\" the same\n    // need to have the same element tag, and same key to be the same\n    if (vnode1.$tag$ === vnode2.$tag$) {\n        if ( vnode1.$tag$ === 'slot') {\n            return vnode1.$name$ === vnode2.$name$;\n        }\n        {\n            return vnode1.$key$ === vnode2.$key$;\n        }\n    }\n    return false;\n};\nconst referenceNode = (node) => {\n    // this node was relocated to a new location in the dom\n    // because of some other component's slot\n    // but we still have an html comment in place of where\n    // it's original location was according to it's original vdom\n    return (node && node['s-ol']) || node;\n};\nconst parentReferenceNode = (node) => (node['s-ol'] ? node['s-ol'] : node).parentNode;\nconst patch = (oldVNode, newVNode) => {\n    const elm = (newVNode.$elm$ = oldVNode.$elm$);\n    const oldChildren = oldVNode.$children$;\n    const newChildren = newVNode.$children$;\n    const tag = newVNode.$tag$;\n    const text = newVNode.$text$;\n    let defaultHolder;\n    if ( text === null) {\n        {\n            // test if we're rendering an svg element, or still rendering nodes inside of one\n            // only add this to the when the compiler sees we're using an svg somewhere\n            isSvgMode = tag === 'svg' ? true : tag === 'foreignObject' ? false : isSvgMode;\n        }\n        // element node\n        {\n            if ( tag === 'slot')\n                ;\n            else {\n                // either this is the first render of an element OR it's an update\n                // AND we already know it's possible it could have changed\n                // this updates the element's css classes, attrs, props, listeners, etc.\n                updateElement(oldVNode, newVNode, isSvgMode);\n            }\n        }\n        if ( oldChildren !== null && newChildren !== null) {\n            // looks like there's child vnodes for both the old and new vnodes\n            updateChildren(elm, oldChildren, newVNode, newChildren);\n        }\n        else if (newChildren !== null) {\n            // no old child vnodes, but there are new child vnodes to add\n            if ( oldVNode.$text$ !== null) {\n                // the old vnode was text, so be sure to clear it out\n                elm.textContent = '';\n            }\n            // add the new vnode children\n            addVnodes(elm, null, newVNode, newChildren, 0, newChildren.length - 1);\n        }\n        else if ( oldChildren !== null) {\n            // no new child vnodes, but there are old child vnodes to remove\n            removeVnodes(oldChildren, 0, oldChildren.length - 1);\n        }\n        if ( isSvgMode && tag === 'svg') {\n            isSvgMode = false;\n        }\n    }\n    else if ( (defaultHolder = elm['s-cr'])) {\n        // this element has slotted content\n        defaultHolder.parentNode.textContent = text;\n    }\n    else if ( oldVNode.$text$ !== text) {\n        // update the text content for the text only vnode\n        // and also only if the text is different than before\n        elm.data = text;\n    }\n};\nconst updateFallbackSlotVisibility = (elm) => {\n    // tslint:disable-next-line: prefer-const\n    let childNodes = elm.childNodes;\n    let childNode;\n    let i;\n    let ilen;\n    let j;\n    let slotNameAttr;\n    let nodeType;\n    for (i = 0, ilen = childNodes.length; i < ilen; i++) {\n        childNode = childNodes[i];\n        if (childNode.nodeType === 1 /* ElementNode */) {\n            if (childNode['s-sr']) {\n                // this is a slot fallback node\n                // get the slot name for this slot reference node\n                slotNameAttr = childNode['s-sn'];\n                // by default always show a fallback slot node\n                // then hide it if there are other slots in the light dom\n                childNode.hidden = false;\n                for (j = 0; j < ilen; j++) {\n                    if (childNodes[j]['s-hn'] !== childNode['s-hn']) {\n                        // this sibling node is from a different component\n                        nodeType = childNodes[j].nodeType;\n                        if (slotNameAttr !== '') {\n                            // this is a named fallback slot node\n                            if (nodeType === 1 /* ElementNode */ && slotNameAttr === childNodes[j].getAttribute('slot')) {\n                                childNode.hidden = true;\n                                break;\n                            }\n                        }\n                        else {\n                            // this is a default fallback slot node\n                            // any element or text node (with content)\n                            // should hide the default fallback slot node\n                            if (nodeType === 1 /* ElementNode */ || (nodeType === 3 /* TextNode */ && childNodes[j].textContent.trim() !== '')) {\n                                childNode.hidden = true;\n                                break;\n                            }\n                        }\n                    }\n                }\n            }\n            // keep drilling down\n            updateFallbackSlotVisibility(childNode);\n        }\n    }\n};\nconst relocateNodes = [];\nconst relocateSlotContent = (elm) => {\n    // tslint:disable-next-line: prefer-const\n    let childNode;\n    let node;\n    let hostContentNodes;\n    let slotNameAttr;\n    let relocateNodeData;\n    let j;\n    let i = 0;\n    let childNodes = elm.childNodes;\n    let ilen = childNodes.length;\n    for (; i < ilen; i++) {\n        childNode = childNodes[i];\n        if (childNode['s-sr'] && (node = childNode['s-cr'])) {\n            // first got the content reference comment node\n            // then we got it's parent, which is where all the host content is in now\n            hostContentNodes = node.parentNode.childNodes;\n            slotNameAttr = childNode['s-sn'];\n            for (j = hostContentNodes.length - 1; j >= 0; j--) {\n                node = hostContentNodes[j];\n                if (!node['s-cn'] && !node['s-nr'] && node['s-hn'] !== childNode['s-hn']) {\n                    // let's do some relocating to its new home\n                    // but never relocate a content reference node\n                    // that is suppose to always represent the original content location\n                    if (isNodeLocatedInSlot(node, slotNameAttr)) {\n                        // it's possible we've already decided to relocate this node\n                        relocateNodeData = relocateNodes.find(r => r.$nodeToRelocate$ === node);\n                        // made some changes to slots\n                        // let's make sure we also double check\n                        // fallbacks are correctly hidden or shown\n                        checkSlotFallbackVisibility = true;\n                        node['s-sn'] = node['s-sn'] || slotNameAttr;\n                        if (relocateNodeData) {\n                            // previously we never found a slot home for this node\n                            // but turns out we did, so let's remember it now\n                            relocateNodeData.$slotRefNode$ = childNode;\n                        }\n                        else {\n                            // add to our list of nodes to relocate\n                            relocateNodes.push({\n                                $slotRefNode$: childNode,\n                                $nodeToRelocate$: node,\n                            });\n                        }\n                        if (node['s-sr']) {\n                            relocateNodes.map(relocateNode => {\n                                if (isNodeLocatedInSlot(relocateNode.$nodeToRelocate$, node['s-sn'])) {\n                                    relocateNodeData = relocateNodes.find(r => r.$nodeToRelocate$ === node);\n                                    if (relocateNodeData && !relocateNode.$slotRefNode$) {\n                                        relocateNode.$slotRefNode$ = relocateNodeData.$slotRefNode$;\n                                    }\n                                }\n                            });\n                        }\n                    }\n                    else if (!relocateNodes.some(r => r.$nodeToRelocate$ === node)) {\n                        // so far this element does not have a slot home, not setting slotRefNode on purpose\n                        // if we never find a home for this element then we'll need to hide it\n                        relocateNodes.push({\n                            $nodeToRelocate$: node,\n                        });\n                    }\n                }\n            }\n        }\n        if (childNode.nodeType === 1 /* ElementNode */) {\n            relocateSlotContent(childNode);\n        }\n    }\n};\nconst isNodeLocatedInSlot = (nodeToRelocate, slotNameAttr) => {\n    if (nodeToRelocate.nodeType === 1 /* ElementNode */) {\n        if (nodeToRelocate.getAttribute('slot') === null && slotNameAttr === '') {\n            return true;\n        }\n        if (nodeToRelocate.getAttribute('slot') === slotNameAttr) {\n            return true;\n        }\n        return false;\n    }\n    if (nodeToRelocate['s-sn'] === slotNameAttr) {\n        return true;\n    }\n    return slotNameAttr === '';\n};\nconst callNodeRefs = (vNode) => {\n    {\n        vNode.$attrs$ && vNode.$attrs$.ref && vNode.$attrs$.ref(null);\n        vNode.$children$ && vNode.$children$.map(callNodeRefs);\n    }\n};\nconst renderVdom = (hostRef, renderFnResults) => {\n    const hostElm = hostRef.$hostElement$;\n    const cmpMeta = hostRef.$cmpMeta$;\n    const oldVNode = hostRef.$vnode$ || newVNode(null, null);\n    const rootVnode = isHost(renderFnResults) ? renderFnResults : h(null, null, renderFnResults);\n    hostTagName = hostElm.tagName;\n    if ( cmpMeta.$attrsToReflect$) {\n        rootVnode.$attrs$ = rootVnode.$attrs$ || {};\n        cmpMeta.$attrsToReflect$.map(([propName, attribute]) => (rootVnode.$attrs$[attribute] = hostElm[propName]));\n    }\n    rootVnode.$tag$ = null;\n    rootVnode.$flags$ |= 4 /* isHost */;\n    hostRef.$vnode$ = rootVnode;\n    rootVnode.$elm$ = oldVNode.$elm$ = ( hostElm.shadowRoot || hostElm );\n    {\n        scopeId = hostElm['s-sc'];\n    }\n    {\n        contentRef = hostElm['s-cr'];\n        useNativeShadowDom = supportsShadow && (cmpMeta.$flags$ & 1 /* shadowDomEncapsulation */) !== 0;\n        // always reset\n        checkSlotFallbackVisibility = false;\n    }\n    // synchronous patch\n    patch(oldVNode, rootVnode);\n    {\n        if (checkSlotRelocate) {\n            // while we're moving nodes around existing nodes, temporarily disable\n            // the disconnectCallback from working\n            plt.$flags$ |= 1 /* isTmpDisconnected */;\n            relocateSlotContent(rootVnode.$elm$);\n            let relocateData;\n            let nodeToRelocate;\n            let orgLocationNode;\n            let parentNodeRef;\n            let insertBeforeNode;\n            let refNode;\n            let i = 0;\n            for (; i < relocateNodes.length; i++) {\n                relocateData = relocateNodes[i];\n                nodeToRelocate = relocateData.$nodeToRelocate$;\n                if (!nodeToRelocate['s-ol']) {\n                    // add a reference node marking this node's original location\n                    // keep a reference to this node for later lookups\n                    orgLocationNode =  doc.createTextNode('');\n                    orgLocationNode['s-nr'] = nodeToRelocate;\n                    nodeToRelocate.parentNode.insertBefore((nodeToRelocate['s-ol'] = orgLocationNode), nodeToRelocate);\n                }\n            }\n            for (i = 0; i < relocateNodes.length; i++) {\n                relocateData = relocateNodes[i];\n                nodeToRelocate = relocateData.$nodeToRelocate$;\n                if (relocateData.$slotRefNode$) {\n                    // by default we're just going to insert it directly\n                    // after the slot reference node\n                    parentNodeRef = relocateData.$slotRefNode$.parentNode;\n                    insertBeforeNode = relocateData.$slotRefNode$.nextSibling;\n                    orgLocationNode = nodeToRelocate['s-ol'];\n                    while ((orgLocationNode = orgLocationNode.previousSibling)) {\n                        refNode = orgLocationNode['s-nr'];\n                        if (refNode && refNode['s-sn'] === nodeToRelocate['s-sn'] && parentNodeRef === refNode.parentNode) {\n                            refNode = refNode.nextSibling;\n                            if (!refNode || !refNode['s-nr']) {\n                                insertBeforeNode = refNode;\n                                break;\n                            }\n                        }\n                    }\n                    if ((!insertBeforeNode && parentNodeRef !== nodeToRelocate.parentNode) || nodeToRelocate.nextSibling !== insertBeforeNode) {\n                        // we've checked that it's worth while to relocate\n                        // since that the node to relocate\n                        // has a different next sibling or parent relocated\n                        if (nodeToRelocate !== insertBeforeNode) {\n                            if (!nodeToRelocate['s-hn'] && nodeToRelocate['s-ol']) {\n                                // probably a component in the index.html that doesn't have it's hostname set\n                                nodeToRelocate['s-hn'] = nodeToRelocate['s-ol'].parentNode.nodeName;\n                            }\n                            // add it back to the dom but in its new home\n                            parentNodeRef.insertBefore(nodeToRelocate, insertBeforeNode);\n                        }\n                    }\n                }\n                else {\n                    // this node doesn't have a slot home to go to, so let's hide it\n                    if (nodeToRelocate.nodeType === 1 /* ElementNode */) {\n                        nodeToRelocate.hidden = true;\n                    }\n                }\n            }\n            // done moving nodes around\n            // allow the disconnect callback to work again\n            plt.$flags$ &= ~1 /* isTmpDisconnected */;\n        }\n        if (checkSlotFallbackVisibility) {\n            updateFallbackSlotVisibility(rootVnode.$elm$);\n        }\n        // always reset\n        relocateNodes.length = 0;\n    }\n};\nconst getElement = (ref) => ( getHostRef(ref).$hostElement$ );\nconst createEvent = (ref, name, flags) => {\n    const elm = getElement(ref);\n    return {\n        emit: (detail) => {\n            return emitEvent(elm, name, {\n                bubbles: !!(flags & 4 /* Bubbles */),\n                composed: !!(flags & 2 /* Composed */),\n                cancelable: !!(flags & 1 /* Cancellable */),\n                detail,\n            });\n        },\n    };\n};\nconst emitEvent = (elm, name, opts) => {\n    const ev = new ( CustomEvent)(name, opts);\n    elm.dispatchEvent(ev);\n    return ev;\n};\nconst attachToAncestor = (hostRef, ancestorComponent) => {\n    if ( ancestorComponent && !hostRef.$onRenderResolve$) {\n        ancestorComponent['s-p'].push(new Promise(r => (hostRef.$onRenderResolve$ = r)));\n    }\n};\nconst scheduleUpdate = (hostRef, isInitialLoad) => {\n    {\n        hostRef.$flags$ |= 16 /* isQueuedForUpdate */;\n    }\n    if ( hostRef.$flags$ & 4 /* isWaitingForChildren */) {\n        hostRef.$flags$ |= 512 /* needsRerender */;\n        return;\n    }\n    const endSchedule = createTime('scheduleUpdate', hostRef.$cmpMeta$.$tagName$);\n    const ancestorComponent = hostRef.$ancestorComponent$;\n    const instance =  hostRef.$lazyInstance$ ;\n    const update = () => updateComponent(hostRef, instance, isInitialLoad);\n    attachToAncestor(hostRef, ancestorComponent);\n    let promise;\n    if (isInitialLoad) {\n        {\n            hostRef.$flags$ |= 256 /* isListenReady */;\n            if (hostRef.$queuedListeners$) {\n                hostRef.$queuedListeners$.map(([methodName, event]) => safeCall(instance, methodName, event));\n                hostRef.$queuedListeners$ = null;\n            }\n        }\n        {\n            promise = safeCall(instance, 'componentWillLoad');\n        }\n    }\n    {\n        promise = then(promise, () => safeCall(instance, 'componentWillRender'));\n    }\n    endSchedule();\n    // there is no ancestorc omponent or the ancestor component\n    // has already fired off its lifecycle update then\n    // fire off the initial update\n    return then(promise,  () => writeTask(update) );\n};\nconst updateComponent = (hostRef, instance, isInitialLoad) => {\n    // updateComponent\n    const elm = hostRef.$hostElement$;\n    const endUpdate = createTime('update', hostRef.$cmpMeta$.$tagName$);\n    const rc = elm['s-rc'];\n    if ( isInitialLoad) {\n        // DOM WRITE!\n        attachStyles(hostRef);\n    }\n    const endRender = createTime('render', hostRef.$cmpMeta$.$tagName$);\n    {\n        {\n            // looks like we've got child nodes to render into this host element\n            // or we need to update the css class/attrs on the host element\n            // DOM WRITE!\n            renderVdom(hostRef, callRender(instance));\n        }\n    }\n    if ( plt.$cssShim$) {\n        plt.$cssShim$.updateHost(elm);\n    }\n    {\n        hostRef.$flags$ &= ~16 /* isQueuedForUpdate */;\n    }\n    {\n        hostRef.$flags$ |= 2 /* hasRendered */;\n    }\n    if ( rc) {\n        // ok, so turns out there are some child host elements\n        // waiting on this parent element to load\n        // let's fire off all update callbacks waiting\n        rc.map(cb => cb());\n        elm['s-rc'] = undefined;\n    }\n    endRender();\n    endUpdate();\n    {\n        const childrenPromises = elm['s-p'];\n        const postUpdate = () => postUpdateComponent(hostRef);\n        if (childrenPromises.length === 0) {\n            postUpdate();\n        }\n        else {\n            Promise.all(childrenPromises).then(postUpdate);\n            hostRef.$flags$ |= 4 /* isWaitingForChildren */;\n            childrenPromises.length = 0;\n        }\n    }\n};\nconst callRender = (instance) => {\n    try {\n        instance =  instance.render && instance.render();\n    }\n    catch (e) {\n        consoleError(e);\n    }\n    return instance;\n};\nconst postUpdateComponent = (hostRef) => {\n    const tagName = hostRef.$cmpMeta$.$tagName$;\n    const elm = hostRef.$hostElement$;\n    const endPostUpdate = createTime('postUpdate', tagName);\n    const instance =  hostRef.$lazyInstance$ ;\n    const ancestorComponent = hostRef.$ancestorComponent$;\n    if (!(hostRef.$flags$ & 64 /* hasLoadedComponent */)) {\n        hostRef.$flags$ |= 64 /* hasLoadedComponent */;\n        {\n            // DOM WRITE!\n            addHydratedFlag(elm);\n        }\n        {\n            safeCall(instance, 'componentDidLoad');\n        }\n        endPostUpdate();\n        {\n            hostRef.$onReadyResolve$(elm);\n            if (!ancestorComponent) {\n                appDidLoad();\n            }\n        }\n    }\n    else {\n        {\n            safeCall(instance, 'componentDidUpdate');\n        }\n        endPostUpdate();\n    }\n    {\n        hostRef.$onInstanceResolve$(elm);\n    }\n    // load events fire from bottom to top\n    // the deepest elements load first then bubbles up\n    {\n        if (hostRef.$onRenderResolve$) {\n            hostRef.$onRenderResolve$();\n            hostRef.$onRenderResolve$ = undefined;\n        }\n        if (hostRef.$flags$ & 512 /* needsRerender */) {\n            nextTick(() => scheduleUpdate(hostRef, false));\n        }\n        hostRef.$flags$ &= ~(4 /* isWaitingForChildren */ | 512 /* needsRerender */);\n    }\n    // ( •_•)\n    // ( •_•)>⌐■-■\n    // (⌐■_■)\n};\nconst forceUpdate = (ref) => {\n    {\n        const hostRef = getHostRef(ref);\n        const isConnected = hostRef.$hostElement$.isConnected;\n        if (isConnected && (hostRef.$flags$ & (2 /* hasRendered */ | 16 /* isQueuedForUpdate */)) === 2 /* hasRendered */) {\n            scheduleUpdate(hostRef, false);\n        }\n        // Returns \"true\" when the forced update was successfully scheduled\n        return isConnected;\n    }\n};\nconst appDidLoad = (who) => {\n    // on appload\n    // we have finish the first big initial render\n    {\n        addHydratedFlag(doc.documentElement);\n    }\n    {\n        plt.$flags$ |= 2 /* appLoaded */;\n    }\n    nextTick(() => emitEvent(win, 'appload', { detail: { namespace: NAMESPACE } }));\n};\nconst safeCall = (instance, method, arg) => {\n    if (instance && instance[method]) {\n        try {\n            return instance[method](arg);\n        }\n        catch (e) {\n            consoleError(e);\n        }\n    }\n    return undefined;\n};\nconst then = (promise, thenFn) => {\n    return promise && promise.then ? promise.then(thenFn) : thenFn();\n};\nconst addHydratedFlag = (elm) => ( elm.classList.add('hydrated') );\nconst initializeClientHydrate = (hostElm, tagName, hostId, hostRef) => {\n    const endHydrate = createTime('hydrateClient', tagName);\n    const shadowRoot = hostElm.shadowRoot;\n    const childRenderNodes = [];\n    const slotNodes = [];\n    const shadowRootNodes =  shadowRoot ? [] : null;\n    const vnode = (hostRef.$vnode$ = newVNode(tagName, null));\n    if (!plt.$orgLocNodes$) {\n        initializeDocumentHydrate(doc.body, (plt.$orgLocNodes$ = new Map()));\n    }\n    hostElm[HYDRATE_ID] = hostId;\n    hostElm.removeAttribute(HYDRATE_ID);\n    clientHydrate(vnode, childRenderNodes, slotNodes, shadowRootNodes, hostElm, hostElm, hostId);\n    childRenderNodes.map(c => {\n        const orgLocationId = c.$hostId$ + '.' + c.$nodeId$;\n        const orgLocationNode = plt.$orgLocNodes$.get(orgLocationId);\n        const node = c.$elm$;\n        if (orgLocationNode && supportsShadow && orgLocationNode['s-en'] === '') {\n            orgLocationNode.parentNode.insertBefore(node, orgLocationNode.nextSibling);\n        }\n        if (!shadowRoot) {\n            node['s-hn'] = tagName;\n            if (orgLocationNode) {\n                node['s-ol'] = orgLocationNode;\n                node['s-ol']['s-nr'] = node;\n            }\n        }\n        plt.$orgLocNodes$.delete(orgLocationId);\n    });\n    if ( shadowRoot) {\n        shadowRootNodes.map(shadowRootNode => {\n            if (shadowRootNode) {\n                shadowRoot.appendChild(shadowRootNode);\n            }\n        });\n    }\n    endHydrate();\n};\nconst clientHydrate = (parentVNode, childRenderNodes, slotNodes, shadowRootNodes, hostElm, node, hostId) => {\n    let childNodeType;\n    let childIdSplt;\n    let childVNode;\n    let i;\n    if (node.nodeType === 1 /* ElementNode */) {\n        childNodeType = node.getAttribute(HYDRATE_CHILD_ID);\n        if (childNodeType) {\n            // got the node data from the element's attribute\n            // `${hostId}.${nodeId}.${depth}.${index}`\n            childIdSplt = childNodeType.split('.');\n            if (childIdSplt[0] === hostId || childIdSplt[0] === '0') {\n                childVNode = {\n                    $flags$: 0,\n                    $hostId$: childIdSplt[0],\n                    $nodeId$: childIdSplt[1],\n                    $depth$: childIdSplt[2],\n                    $index$: childIdSplt[3],\n                    $tag$: node.tagName.toLowerCase(),\n                    $elm$: node,\n                    $attrs$: null,\n                    $children$: null,\n                    $key$: null,\n                    $name$: null,\n                    $text$: null,\n                };\n                childRenderNodes.push(childVNode);\n                node.removeAttribute(HYDRATE_CHILD_ID);\n                // this is a new child vnode\n                // so ensure its parent vnode has the vchildren array\n                if (!parentVNode.$children$) {\n                    parentVNode.$children$ = [];\n                }\n                // add our child vnode to a specific index of the vnode's children\n                parentVNode.$children$[childVNode.$index$] = childVNode;\n                // this is now the new parent vnode for all the next child checks\n                parentVNode = childVNode;\n                if (shadowRootNodes && childVNode.$depth$ === '0') {\n                    shadowRootNodes[childVNode.$index$] = childVNode.$elm$;\n                }\n            }\n        }\n        // recursively drill down, end to start so we can remove nodes\n        for (i = node.childNodes.length - 1; i >= 0; i--) {\n            clientHydrate(parentVNode, childRenderNodes, slotNodes, shadowRootNodes, hostElm, node.childNodes[i], hostId);\n        }\n        if (node.shadowRoot) {\n            // keep drilling down through the shadow root nodes\n            for (i = node.shadowRoot.childNodes.length - 1; i >= 0; i--) {\n                clientHydrate(parentVNode, childRenderNodes, slotNodes, shadowRootNodes, hostElm, node.shadowRoot.childNodes[i], hostId);\n            }\n        }\n    }\n    else if (node.nodeType === 8 /* CommentNode */) {\n        // `${COMMENT_TYPE}.${hostId}.${nodeId}.${depth}.${index}`\n        childIdSplt = node.nodeValue.split('.');\n        if (childIdSplt[1] === hostId || childIdSplt[1] === '0') {\n            // comment node for either the host id or a 0 host id\n            childNodeType = childIdSplt[0];\n            childVNode = {\n                $flags$: 0,\n                $hostId$: childIdSplt[1],\n                $nodeId$: childIdSplt[2],\n                $depth$: childIdSplt[3],\n                $index$: childIdSplt[4],\n                $elm$: node,\n                $attrs$: null,\n                $children$: null,\n                $key$: null,\n                $name$: null,\n                $tag$: null,\n                $text$: null,\n            };\n            if (childNodeType === TEXT_NODE_ID) {\n                childVNode.$elm$ = node.nextSibling;\n                if (childVNode.$elm$ && childVNode.$elm$.nodeType === 3 /* TextNode */) {\n                    childVNode.$text$ = childVNode.$elm$.textContent;\n                    childRenderNodes.push(childVNode);\n                    // remove the text comment since it's no longer needed\n                    node.remove();\n                    if (!parentVNode.$children$) {\n                        parentVNode.$children$ = [];\n                    }\n                    parentVNode.$children$[childVNode.$index$] = childVNode;\n                    if (shadowRootNodes && childVNode.$depth$ === '0') {\n                        shadowRootNodes[childVNode.$index$] = childVNode.$elm$;\n                    }\n                }\n            }\n            else if (childVNode.$hostId$ === hostId) {\n                // this comment node is specifcally for this host id\n                if (childNodeType === SLOT_NODE_ID) {\n                    // `${SLOT_NODE_ID}.${hostId}.${nodeId}.${depth}.${index}.${slotName}`;\n                    childVNode.$tag$ = 'slot';\n                    if (childIdSplt[5]) {\n                        node['s-sn'] = childVNode.$name$ = childIdSplt[5];\n                    }\n                    else {\n                        node['s-sn'] = '';\n                    }\n                    node['s-sr'] = true;\n                    if ( shadowRootNodes) {\n                        // browser support shadowRoot and this is a shadow dom component\n                        // create an actual slot element\n                        childVNode.$elm$ = doc.createElement(childVNode.$tag$);\n                        if (childVNode.$name$) {\n                            // add the slot name attribute\n                            childVNode.$elm$.setAttribute('name', childVNode.$name$);\n                        }\n                        // insert the new slot element before the slot comment\n                        node.parentNode.insertBefore(childVNode.$elm$, node);\n                        // remove the slot comment since it's not needed for shadow\n                        node.remove();\n                        if (childVNode.$depth$ === '0') {\n                            shadowRootNodes[childVNode.$index$] = childVNode.$elm$;\n                        }\n                    }\n                    slotNodes.push(childVNode);\n                    if (!parentVNode.$children$) {\n                        parentVNode.$children$ = [];\n                    }\n                    parentVNode.$children$[childVNode.$index$] = childVNode;\n                }\n                else if (childNodeType === CONTENT_REF_ID) {\n                    // `${CONTENT_REF_ID}.${hostId}`;\n                    if ( shadowRootNodes) {\n                        // remove the content ref comment since it's not needed for shadow\n                        node.remove();\n                    }\n                    else {\n                        hostElm['s-cr'] = node;\n                        node['s-cn'] = true;\n                    }\n                }\n            }\n        }\n    }\n    else if (parentVNode && parentVNode.$tag$ === 'style') {\n        const vnode = newVNode(null, node.textContent);\n        vnode.$elm$ = node;\n        vnode.$index$ = '0';\n        parentVNode.$children$ = [vnode];\n    }\n};\nconst initializeDocumentHydrate = (node, orgLocNodes) => {\n    if (node.nodeType === 1 /* ElementNode */) {\n        let i = 0;\n        for (; i < node.childNodes.length; i++) {\n            initializeDocumentHydrate(node.childNodes[i], orgLocNodes);\n        }\n        if (node.shadowRoot) {\n            for (i = 0; i < node.shadowRoot.childNodes.length; i++) {\n                initializeDocumentHydrate(node.shadowRoot.childNodes[i], orgLocNodes);\n            }\n        }\n    }\n    else if (node.nodeType === 8 /* CommentNode */) {\n        const childIdSplt = node.nodeValue.split('.');\n        if (childIdSplt[0] === ORG_LOCATION_ID) {\n            orgLocNodes.set(childIdSplt[1] + '.' + childIdSplt[2], node);\n            node.nodeValue = '';\n            // useful to know if the original location is\n            // the root light-dom of a shadow dom component\n            node['s-en'] = childIdSplt[3];\n        }\n    }\n};\nconst parsePropertyValue = (propValue, propType) => {\n    // ensure this value is of the correct prop type\n    if (propValue != null && !isComplexType(propValue)) {\n        if ( propType & 4 /* Boolean */) {\n            // per the HTML spec, any string value means it is a boolean true value\n            // but we'll cheat here and say that the string \"false\" is the boolean false\n            return propValue === 'false' ? false : propValue === '' || !!propValue;\n        }\n        if ( propType & 2 /* Number */) {\n            // force it to be a number\n            return parseFloat(propValue);\n        }\n        if ( propType & 1 /* String */) {\n            // could have been passed as a number or boolean\n            // but we still want it as a string\n            return String(propValue);\n        }\n        // redundant return here for better minification\n        return propValue;\n    }\n    // not sure exactly what type we want\n    // so no need to change to a different type\n    return propValue;\n};\nconst getValue = (ref, propName) => getHostRef(ref).$instanceValues$.get(propName);\nconst setValue = (ref, propName, newVal, cmpMeta) => {\n    // check our new property value against our internal value\n    const hostRef = getHostRef(ref);\n    const oldVal = hostRef.$instanceValues$.get(propName);\n    const flags = hostRef.$flags$;\n    const instance =  hostRef.$lazyInstance$ ;\n    newVal = parsePropertyValue(newVal, cmpMeta.$members$[propName][0]);\n    if (( !(flags & 8 /* isConstructingInstance */) || oldVal === undefined) && newVal !== oldVal) {\n        // gadzooks! the property's value has changed!!\n        // set our new value!\n        hostRef.$instanceValues$.set(propName, newVal);\n        if ( instance) {\n            // get an array of method names of watch functions to call\n            if ( cmpMeta.$watchers$ && flags & 128 /* isWatchReady */) {\n                const watchMethods = cmpMeta.$watchers$[propName];\n                if (watchMethods) {\n                    // this instance is watching for when this property changed\n                    watchMethods.map(watchMethodName => {\n                        try {\n                            // fire off each of the watch methods that are watching this property\n                            instance[watchMethodName](newVal, oldVal, propName);\n                        }\n                        catch (e) {\n                            consoleError(e);\n                        }\n                    });\n                }\n            }\n            if ( (flags & (2 /* hasRendered */ | 16 /* isQueuedForUpdate */)) === 2 /* hasRendered */) {\n                // looks like this value actually changed, so we've got work to do!\n                // but only if we've already rendered, otherwise just chill out\n                // queue that we need to do an update, but don't worry about queuing\n                // up millions cuz this function ensures it only runs once\n                scheduleUpdate(hostRef, false);\n            }\n        }\n    }\n};\nconst proxyComponent = (Cstr, cmpMeta, flags) => {\n    if ( cmpMeta.$members$) {\n        if ( Cstr.watchers) {\n            cmpMeta.$watchers$ = Cstr.watchers;\n        }\n        // It's better to have a const than two Object.entries()\n        const members = Object.entries(cmpMeta.$members$);\n        const prototype = Cstr.prototype;\n        members.map(([memberName, [memberFlags]]) => {\n            if ( (memberFlags & 31 /* Prop */ || (( flags & 2 /* proxyState */) && memberFlags & 32 /* State */))) {\n                // proxyComponent - prop\n                Object.defineProperty(prototype, memberName, {\n                    get() {\n                        // proxyComponent, get value\n                        return getValue(this, memberName);\n                    },\n                    set(newValue) {\n                        // proxyComponent, set value\n                        setValue(this, memberName, newValue, cmpMeta);\n                    },\n                    configurable: true,\n                    enumerable: true,\n                });\n            }\n            else if ( flags & 1 /* isElementConstructor */ && memberFlags & 64 /* Method */) {\n                // proxyComponent - method\n                Object.defineProperty(prototype, memberName, {\n                    value(...args) {\n                        const ref = getHostRef(this);\n                        return ref.$onInstancePromise$.then(() => ref.$lazyInstance$[memberName](...args));\n                    },\n                });\n            }\n        });\n        if ( ( flags & 1 /* isElementConstructor */)) {\n            const attrNameToPropName = new Map();\n            prototype.attributeChangedCallback = function (attrName, _oldValue, newValue) {\n                plt.jmp(() => {\n                    const propName = attrNameToPropName.get(attrName);\n                    this[propName] = newValue === null && typeof this[propName] === 'boolean' ? false : newValue;\n                });\n            };\n            // create an array of attributes to observe\n            // and also create a map of html attribute name to js property name\n            Cstr.observedAttributes = members\n                .filter(([_, m]) => m[0] & 15 /* HasAttribute */) // filter to only keep props that should match attributes\n                .map(([propName, m]) => {\n                const attrName = m[1] || propName;\n                attrNameToPropName.set(attrName, propName);\n                if ( m[0] & 512 /* ReflectAttr */) {\n                    cmpMeta.$attrsToReflect$.push([propName, attrName]);\n                }\n                return attrName;\n            });\n        }\n    }\n    return Cstr;\n};\nconst initializeComponent = async (elm, hostRef, cmpMeta, hmrVersionId, Cstr) => {\n    // initializeComponent\n    if ( (hostRef.$flags$ & 32 /* hasInitializedComponent */) === 0) {\n        // we haven't initialized this element yet\n        hostRef.$flags$ |= 32 /* hasInitializedComponent */;\n        if ( hostRef.$modeName$ == null) {\n            // initializeComponent\n            // looks like mode wasn't set as a property directly yet\n            // first check if there's an attribute\n            // next check the app's global\n            hostRef.$modeName$ = typeof cmpMeta.$lazyBundleIds$ !== 'string' ? computeMode(elm) : '';\n        }\n        {\n            // lazy loaded components\n            // request the component's implementation to be\n            // wired up with the host element\n            Cstr = loadModule(cmpMeta, hostRef);\n            if (Cstr.then) {\n                // Await creates a micro-task avoid if possible\n                const endLoad = uniqueTime();\n                Cstr = await Cstr;\n                endLoad();\n            }\n            if ( !Cstr.isProxied) {\n                // we'eve never proxied this Constructor before\n                // let's add the getters/setters to its prototype before\n                // the first time we create an instance of the implementation\n                {\n                    cmpMeta.$watchers$ = Cstr.watchers;\n                }\n                proxyComponent(Cstr, cmpMeta, 2 /* proxyState */);\n                Cstr.isProxied = true;\n            }\n            const endNewInstance = createTime('createInstance', cmpMeta.$tagName$);\n            // ok, time to construct the instance\n            // but let's keep track of when we start and stop\n            // so that the getters/setters don't incorrectly step on data\n            {\n                hostRef.$flags$ |= 8 /* isConstructingInstance */;\n            }\n            // construct the lazy-loaded component implementation\n            // passing the hostRef is very important during\n            // construction in order to directly wire together the\n            // host element and the lazy-loaded instance\n            try {\n                new Cstr(hostRef);\n            }\n            catch (e) {\n                consoleError(e);\n            }\n            {\n                hostRef.$flags$ &= ~8 /* isConstructingInstance */;\n            }\n            {\n                hostRef.$flags$ |= 128 /* isWatchReady */;\n            }\n            endNewInstance();\n            fireConnectedCallback(hostRef.$lazyInstance$);\n        }\n        const scopeId =  getScopeId(cmpMeta.$tagName$, hostRef.$modeName$) ;\n        if ( !styles.has(scopeId) && Cstr.style) {\n            const endRegisterStyles = createTime('registerStyles', cmpMeta.$tagName$);\n            // this component has styles but we haven't registered them yet\n            let style = Cstr.style;\n            if ( typeof style !== 'string') {\n                style = style[hostRef.$modeName$];\n            }\n            if ( cmpMeta.$flags$ & 8 /* needsShadowDomShim */) {\n                style = await import('./shadow-css-c018471d.js').then(m => m.scopeCss(style, scopeId, false));\n            }\n            registerStyle(scopeId, style, !!(cmpMeta.$flags$ & 1 /* shadowDomEncapsulation */));\n            endRegisterStyles();\n        }\n    }\n    // we've successfully created a lazy instance\n    const ancestorComponent = hostRef.$ancestorComponent$;\n    const schedule = () => scheduleUpdate(hostRef, true);\n    if ( ancestorComponent && ancestorComponent['s-rc']) {\n        // this is the intial load and this component it has an ancestor component\n        // but the ancestor component has NOT fired its will update lifecycle yet\n        // so let's just cool our jets and wait for the ancestor to continue first\n        // this will get fired off when the ancestor component\n        // finally gets around to rendering its lazy self\n        // fire off the initial update\n        ancestorComponent['s-rc'].push(schedule);\n    }\n    else {\n        schedule();\n    }\n};\nconst fireConnectedCallback = (instance) => {\n    {\n        safeCall(instance, 'connectedCallback');\n    }\n};\nconst connectedCallback = (elm) => {\n    if ((plt.$flags$ & 1 /* isTmpDisconnected */) === 0) {\n        const hostRef = getHostRef(elm);\n        const cmpMeta = hostRef.$cmpMeta$;\n        const endConnected = createTime('connectedCallback', cmpMeta.$tagName$);\n        {\n            // only run if we have listeners being attached to a parent\n            addHostEventListeners(elm, hostRef, cmpMeta.$listeners$, true);\n        }\n        if (!(hostRef.$flags$ & 1 /* hasConnected */)) {\n            // first time this component has connected\n            hostRef.$flags$ |= 1 /* hasConnected */;\n            let hostId;\n            {\n                hostId = elm.getAttribute(HYDRATE_ID);\n                if (hostId) {\n                    if ( supportsShadow && cmpMeta.$flags$ & 1 /* shadowDomEncapsulation */) {\n                        const scopeId =  addStyle(elm.shadowRoot, cmpMeta, elm.getAttribute('s-mode')) ;\n                        elm.classList.remove(scopeId + '-h', scopeId + '-s');\n                    }\n                    initializeClientHydrate(elm, cmpMeta.$tagName$, hostId, hostRef);\n                }\n            }\n            if ( !hostId) {\n                // initUpdate\n                // if the slot polyfill is required we'll need to put some nodes\n                // in here to act as original content anchors as we move nodes around\n                // host element has been connected to the DOM\n                if ( ( cmpMeta.$flags$ & (4 /* hasSlotRelocation */ | 8 /* needsShadowDomShim */))) {\n                    setContentReference(elm);\n                }\n            }\n            {\n                // find the first ancestor component (if there is one) and register\n                // this component as one of the actively loading child components for its ancestor\n                let ancestorComponent = elm;\n                while ((ancestorComponent = ancestorComponent.parentNode || ancestorComponent.host)) {\n                    // climb up the ancestors looking for the first\n                    // component that hasn't finished its lifecycle update yet\n                    if (( ancestorComponent.nodeType === 1 /* ElementNode */ && ancestorComponent.hasAttribute('s-id')) || ancestorComponent['s-p']) {\n                        // we found this components first ancestor component\n                        // keep a reference to this component's ancestor component\n                        attachToAncestor(hostRef, (hostRef.$ancestorComponent$ = ancestorComponent));\n                        break;\n                    }\n                }\n            }\n            // Lazy properties\n            // https://developers.google.com/web/fundamentals/web-components/best-practices#lazy-properties\n            if ( cmpMeta.$members$) {\n                Object.entries(cmpMeta.$members$).map(([memberName, [memberFlags]]) => {\n                    if (memberFlags & 31 /* Prop */ && elm.hasOwnProperty(memberName)) {\n                        const value = elm[memberName];\n                        delete elm[memberName];\n                        elm[memberName] = value;\n                    }\n                });\n            }\n            {\n                // connectedCallback, taskQueue, initialLoad\n                // angular sets attribute AFTER connectCallback\n                // https://github.com/angular/angular/issues/18909\n                // https://github.com/angular/angular/issues/19940\n                nextTick(() => initializeComponent(elm, hostRef, cmpMeta));\n            }\n        }\n        else {\n            // not the first time this has connected\n            // reattach any event listeners to the host\n            // since they would have been removed when disconnected\n            addHostEventListeners(elm, hostRef, cmpMeta.$listeners$, false);\n            // fire off connectedCallback() on component instance\n            fireConnectedCallback(hostRef.$lazyInstance$);\n        }\n        endConnected();\n    }\n};\nconst setContentReference = (elm) => {\n    // only required when we're NOT using native shadow dom (slot)\n    // or this browser doesn't support native shadow dom\n    // and this host element was NOT created with SSR\n    // let's pick out the inner content for slot projection\n    // create a node to represent where the original\n    // content was first placed, which is useful later on\n    const contentRefElm = (elm['s-cr'] = doc.createComment( ''));\n    contentRefElm['s-cn'] = true;\n    elm.insertBefore(contentRefElm, elm.firstChild);\n};\nconst disconnectedCallback = (elm) => {\n    if ((plt.$flags$ & 1 /* isTmpDisconnected */) === 0) {\n        const hostRef = getHostRef(elm);\n        const instance =  hostRef.$lazyInstance$ ;\n        {\n            if (hostRef.$rmListeners$) {\n                hostRef.$rmListeners$.map(rmListener => rmListener());\n                hostRef.$rmListeners$ = undefined;\n            }\n        }\n        // clear CSS var-shim tracking\n        if ( plt.$cssShim$) {\n            plt.$cssShim$.removeHost(elm);\n        }\n        {\n            safeCall(instance, 'disconnectedCallback');\n        }\n        {\n            safeCall(instance, 'componentDidUnload');\n        }\n    }\n};\nconst bootstrapLazy = (lazyBundles, options = {}) => {\n    const endBootstrap = createTime();\n    const cmpTags = [];\n    const exclude = options.exclude || [];\n    const customElements = win.customElements;\n    const head = doc.head;\n    const metaCharset = /*@__PURE__*/ head.querySelector('meta[charset]');\n    const visibilityStyle = /*@__PURE__*/ doc.createElement('style');\n    const deferredConnectedCallbacks = [];\n    const styles = /*@__PURE__*/ doc.querySelectorAll(`[${HYDRATED_STYLE_ID}]`);\n    let appLoadFallback;\n    let isBootstrapping = true;\n    let i = 0;\n    Object.assign(plt, options);\n    plt.$resourcesUrl$ = new URL(options.resourcesUrl || './', doc.baseURI).href;\n    if (options.syncQueue) {\n        plt.$flags$ |= 4 /* queueSync */;\n    }\n    {\n        // If the app is already hydrated there is not point to disable the\n        // async queue. This will improve the first input delay\n        plt.$flags$ |= 2 /* appLoaded */;\n    }\n    {\n        for (; i < styles.length; i++) {\n            registerStyle(styles[i].getAttribute(HYDRATED_STYLE_ID), convertScopedToShadow(styles[i].innerHTML), true);\n        }\n    }\n    lazyBundles.map(lazyBundle => lazyBundle[1].map(compactMeta => {\n        const cmpMeta = {\n            $flags$: compactMeta[0],\n            $tagName$: compactMeta[1],\n            $members$: compactMeta[2],\n            $listeners$: compactMeta[3],\n        };\n        {\n            cmpMeta.$members$ = compactMeta[2];\n        }\n        {\n            cmpMeta.$listeners$ = compactMeta[3];\n        }\n        {\n            cmpMeta.$attrsToReflect$ = [];\n        }\n        {\n            cmpMeta.$watchers$ = {};\n        }\n        if ( !supportsShadow && cmpMeta.$flags$ & 1 /* shadowDomEncapsulation */) {\n            cmpMeta.$flags$ |= 8 /* needsShadowDomShim */;\n        }\n        const tagName = cmpMeta.$tagName$;\n        const HostElement = class extends HTMLElement {\n            // StencilLazyHost\n            constructor(self) {\n                // @ts-ignore\n                super(self);\n                self = this;\n                registerHost(self, cmpMeta);\n                if ( cmpMeta.$flags$ & 1 /* shadowDomEncapsulation */) {\n                    // this component is using shadow dom\n                    // and this browser supports shadow dom\n                    // add the read-only property \"shadowRoot\" to the host element\n                    // adding the shadow root build conditionals to minimize runtime\n                    if (supportsShadow) {\n                        {\n                            self.attachShadow({ mode: 'open' });\n                        }\n                    }\n                    else if ( !('shadowRoot' in self)) {\n                        self.shadowRoot = self;\n                    }\n                }\n            }\n            connectedCallback() {\n                if (appLoadFallback) {\n                    clearTimeout(appLoadFallback);\n                    appLoadFallback = null;\n                }\n                if (isBootstrapping) {\n                    // connectedCallback will be processed once all components have been registered\n                    deferredConnectedCallbacks.push(this);\n                }\n                else {\n                    plt.jmp(() => connectedCallback(this));\n                }\n            }\n            disconnectedCallback() {\n                plt.jmp(() => disconnectedCallback(this));\n            }\n            forceUpdate() {\n                forceUpdate(this);\n            }\n            componentOnReady() {\n                return getHostRef(this).$onReadyPromise$;\n            }\n        };\n        cmpMeta.$lazyBundleIds$ = lazyBundle[0];\n        if (!exclude.includes(tagName) && !customElements.get(tagName)) {\n            cmpTags.push(tagName);\n            customElements.define(tagName, proxyComponent(HostElement, cmpMeta, 1 /* isElementConstructor */));\n        }\n    }));\n    {\n        visibilityStyle.innerHTML = cmpTags + HYDRATED_CSS;\n        visibilityStyle.setAttribute('data-styles', '');\n        head.insertBefore(visibilityStyle, metaCharset ? metaCharset.nextSibling : head.firstChild);\n    }\n    // Process deferred connectedCallbacks now all components have been registered\n    isBootstrapping = false;\n    if (deferredConnectedCallbacks.length) {\n        deferredConnectedCallbacks.map(host => host.connectedCallback());\n    }\n    else {\n        {\n            plt.jmp(() => (appLoadFallback = setTimeout(appDidLoad, 30)));\n        }\n    }\n    // Fallback appLoad event\n    endBootstrap();\n};\nconst getAssetPath = (path) => {\n    const assetUrl = new URL(path, plt.$resourcesUrl$);\n    return assetUrl.origin !== win.location.origin ? assetUrl.href : assetUrl.pathname;\n};\nconst hostRefs = new WeakMap();\nconst getHostRef = (ref) => hostRefs.get(ref);\nconst registerInstance = (lazyInstance, hostRef) => hostRefs.set((hostRef.$lazyInstance$ = lazyInstance), hostRef);\nconst registerHost = (elm, cmpMeta) => {\n    const hostRef = {\n        $flags$: 0,\n        $hostElement$: elm,\n        $cmpMeta$: cmpMeta,\n        $instanceValues$: new Map(),\n    };\n    {\n        hostRef.$onInstancePromise$ = new Promise(r => (hostRef.$onInstanceResolve$ = r));\n    }\n    {\n        hostRef.$onReadyPromise$ = new Promise(r => (hostRef.$onReadyResolve$ = r));\n        elm['s-p'] = [];\n        elm['s-rc'] = [];\n    }\n    addHostEventListeners(elm, hostRef, cmpMeta.$listeners$, false);\n    return hostRefs.set(elm, hostRef);\n};\nconst isMemberInElement = (elm, memberName) => memberName in elm;\nconst consoleError = (e) => console.error(e);\nconst cmpModules = /*@__PURE__*/ new Map();\nconst loadModule = (cmpMeta, hostRef, hmrVersionId) => {\n    // loadModuleImport\n    const exportName = cmpMeta.$tagName$.replace(/-/g, '_');\n    const bundleId = ( typeof cmpMeta.$lazyBundleIds$ !== 'string' ? cmpMeta.$lazyBundleIds$[hostRef.$modeName$] : cmpMeta.$lazyBundleIds$);\n    const module =  cmpModules.get(bundleId) ;\n    if (module) {\n        return module[exportName];\n    }\n    return import(\n    /* webpackInclude: /\\.entry\\.js$/ */\n    /* webpackExclude: /\\.system\\.entry\\.js$/ */\n    /* webpackMode: \"lazy\" */\n    /* webpackChunkName: \"stencil-[request]\" */\n    `./${bundleId}.entry.js${ ''}`).then(importedModule => {\n        {\n            cmpModules.set(bundleId, importedModule);\n        }\n        return importedModule[exportName];\n    }, consoleError);\n};\nconst styles = new Map();\nconst modeResolutionChain = [];\nconst queueDomReads = [];\nconst queueDomWrites = [];\nconst queueDomWritesLow = [];\nconst queueTask = (queue, write) => (cb) => {\n    queue.push(cb);\n    if (!queuePending) {\n        queuePending = true;\n        if (write && plt.$flags$ & 4 /* queueSync */) {\n            nextTick(flush);\n        }\n        else {\n            plt.raf(flush);\n        }\n    }\n};\nconst consume = (queue) => {\n    for (let i = 0; i < queue.length; i++) {\n        try {\n            queue[i](performance.now());\n        }\n        catch (e) {\n            consoleError(e);\n        }\n    }\n    queue.length = 0;\n};\nconst consumeTimeout = (queue, timeout) => {\n    let i = 0;\n    let ts = 0;\n    while (i < queue.length && (ts = performance.now()) < timeout) {\n        try {\n            queue[i++](ts);\n        }\n        catch (e) {\n            consoleError(e);\n        }\n    }\n    if (i === queue.length) {\n        queue.length = 0;\n    }\n    else if (i !== 0) {\n        queue.splice(0, i);\n    }\n};\nconst flush = () => {\n    queueCongestion++;\n    // always force a bunch of medium callbacks to run, but still have\n    // a throttle on how many can run in a certain time\n    // DOM READS!!!\n    consume(queueDomReads);\n    const timeout = (plt.$flags$ & 6 /* queueMask */) === 2 /* appLoaded */ ? performance.now() + 10 * Math.ceil(queueCongestion * (1.0 / 22.0)) : Infinity;\n    // DOM WRITES!!!\n    consumeTimeout(queueDomWrites, timeout);\n    consumeTimeout(queueDomWritesLow, timeout);\n    if (queueDomWrites.length > 0) {\n        queueDomWritesLow.push(...queueDomWrites);\n        queueDomWrites.length = 0;\n    }\n    if ((queuePending = queueDomReads.length + queueDomWrites.length + queueDomWritesLow.length > 0)) {\n        // still more to do yet, but we've run out of time\n        // let's let this thing cool off and try again in the next tick\n        plt.raf(flush);\n    }\n    else {\n        queueCongestion = 0;\n    }\n};\nconst nextTick = /*@__PURE__*/ (cb) => promiseResolve().then(cb);\nconst readTask = /*@__PURE__*/ queueTask(queueDomReads, false);\nconst writeTask = /*@__PURE__*/ queueTask(queueDomWrites, true);\nconst Build = {\n    isDev:  false,\n    isBrowser: true,\n    isServer: false,\n    isTesting:  false,\n};\nconst patchEsm = () => {\n    // @ts-ignore\n    if ( !(CSS && CSS.supports && CSS.supports('color', 'var(--c)'))) {\n        // @ts-ignore\n        return import(/* webpackChunkName: \"stencil-polyfills-css-shim\" */ './css-shim-c6f94a39.js').then(() => {\n            if ((plt.$cssShim$ = win.__cssshim)) {\n                return plt.$cssShim$.i();\n            }\n            else {\n                // for better minification\n                return 0;\n            }\n        });\n    }\n    return promiseResolve();\n};\nconst patchBrowser = () => {\n    {\n        // shim css vars\n        plt.$cssShim$ = win.__cssshim;\n    }\n    // @ts-ignore\n    const scriptElm =  Array.from(doc.querySelectorAll('script')).find(s => new RegExp(`\\/${NAMESPACE}(\\\\.esm)?\\\\.js($|\\\\?|#)`).test(s.src) || s.getAttribute('data-stencil-namespace') === NAMESPACE)\n        ;\n    const opts =  scriptElm['data-opts'] || {} ;\n    if ( 'onbeforeload' in scriptElm && !history.scrollRestoration /* IS_ESM_BUILD */) {\n        // Safari < v11 support: This IF is true if it's Safari below v11.\n        // This fn cannot use async/await since Safari didn't support it until v11,\n        // however, Safari 10 did support modules. Safari 10 also didn't support \"nomodule\",\n        // so both the ESM file and nomodule file would get downloaded. Only Safari\n        // has 'onbeforeload' in the script, and \"history.scrollRestoration\" was added\n        // to Safari in v11. Return a noop then() so the async/await ESM code doesn't continue.\n        // IS_ESM_BUILD is replaced at build time so this check doesn't happen in systemjs builds.\n        return {\n            then() {\n                /* promise noop */\n            },\n        };\n    }\n    {\n        opts.resourcesUrl = new URL('.', new URL(scriptElm.getAttribute('data-resources-url') || scriptElm.src, win.location.href)).href;\n        {\n            patchDynamicImport(opts.resourcesUrl, scriptElm);\n        }\n        if ( !win.customElements) {\n            // module support, but no custom elements support (Old Edge)\n            // @ts-ignore\n            return import(/* webpackChunkName: \"stencil-polyfills-dom\" */ './dom-17330dd2.js').then(() => opts);\n        }\n    }\n    return promiseResolve(opts);\n};\nconst patchDynamicImport = (base, orgScriptElm) => {\n    const importFunctionName = getDynamicImportFunction(NAMESPACE);\n    try {\n        // test if this browser supports dynamic imports\n        // There is a caching issue in V8, that breaks using import() in Function\n        // By generating a random string, we can workaround it\n        // Check https://bugs.chromium.org/p/chromium/issues/detail?id=990810 for more info\n        win[importFunctionName] = new Function('w', `return import(w);//${Math.random()}`);\n    }\n    catch (e) {\n        // this shim is specifically for browsers that do support \"esm\" imports\n        // however, they do NOT support \"dynamic\" imports\n        // basically this code is for old Edge, v18 and below\n        const moduleMap = new Map();\n        win[importFunctionName] = (src) => {\n            const url = new URL(src, base).href;\n            let mod = moduleMap.get(url);\n            if (!mod) {\n                const script = doc.createElement('script');\n                script.type = 'module';\n                script.crossOrigin = orgScriptElm.crossOrigin;\n                script.src = URL.createObjectURL(new Blob([`import * as m from '${url}'; window.${importFunctionName}.m = m;`], { type: 'application/javascript' }));\n                mod = new Promise(resolve => {\n                    script.onload = () => {\n                        resolve(win[importFunctionName].m);\n                        script.remove();\n                    };\n                });\n                moduleMap.set(url, mod);\n                doc.head.appendChild(script);\n            }\n            return mod;\n        };\n    }\n};\n\nexport { Build as B, Host as H, patchEsm as a, bootstrapLazy as b, getAssetPath as c, createEvent as d, getElement as e, readTask as f, getMode as g, h, forceUpdate as i, patchBrowser as p, registerInstance as r, setMode as s, writeTask as w };\n"]},"metadata":{},"sourceType":"module"}